/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,40],$V2=[1,8],$V3=[1,10],$V4=[1,11],$V5=[1,71],$V6=[1,34],$V7=[1,75],$V8=[1,35],$V9=[1,32],$Va=[1,48],$Vb=[1,49],$Vc=[1,50],$Vd=[1,76],$Ve=[1,51],$Vf=[1,79],$Vg=[1,27],$Vh=[1,31],$Vi=[1,74],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,77],$Vn=[1,78],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,36],$VA=[1,37],$VB=[1,38],$VC=[1,39],$VD=[1,69],$VE=[1,64],$VF=[1,45],$VG=[9,14,16,23,25,40,43,46,47,49,55,56,57,59,61,62,63,65,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,106,114,119],$VH=[5,14,23,25,40,43,46,47,49,50,55,56,57,59,61,62,63,65,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,106,114,119],$VI=[5,14,23,25,40,43,46,47,49,50,55,56,57,59,61,62,63,64,65,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,106,114,119],$VJ=[1,92],$VK=[1,93],$VL=[1,106],$VM=[1,108],$VN=[1,107],$VO=[1,113],$VP=[1,114],$VQ=[1,116],$VR=[1,127],$VS=[2,113],$VT=[1,143],$VU=[1,142],$VV=[1,137],$VW=[1,138],$VX=[1,128],$VY=[1,132],$VZ=[1,133],$V_=[1,134],$V$=[1,135],$V01=[1,136],$V11=[1,130],$V21=[1,139],$V31=[1,140],$V41=[1,141],$V51=[10,12,24,46,113,114,116,117,122,123,124,129,130,131],$V61=[2,189],$V71=[1,144],$V81=[1,145],$V91=[1,146],$Va1=[24,41],$Vb1=[2,197],$Vc1=[1,147],$Vd1=[1,152],$Ve1=[24,41,122,123],$Vf1=[2,213],$Vg1=[1,154],$Vh1=[2,220],$Vi1=[1,156],$Vj1=[1,157],$Vk1=[14,39,41,46,71,93],$Vl1=[24,41,123],$Vm1=[1,171],$Vn1=[10,12,24,41,45,50,99,113,114,122,123,124,129,130,131],$Vo1=[1,175],$Vp1=[1,176],$Vq1=[1,177],$Vr1=[10,12,24,41,45,46,50,99,113,114,116,117,122,123,124,129,130,131],$Vs1=[2,181],$Vt1=[1,182],$Vu1=[1,183],$Vv1=[1,184],$Vw1=[1,185],$Vx1=[2,191],$Vy1=[2,192],$Vz1=[9,10,12,14,16,23,24,25,40,41,43,45,46,47,49,50,55,56,57,59,61,62,63,65,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,99,106,113,114,116,117,119,122,123,124,129,130,131],$VA1=[2,90],$VB1=[1,193],$VC1=[1,192],$VD1=[1,201],$VE1=[1,202],$VF1=[24,45],$VG1=[2,125],$VH1=[1,211],$VI1=[1,212],$VJ1=[1,213],$VK1=[1,215],$VL1=[2,186],$VM1=[39,46,71,93],$VN1=[2,110],$VO1=[1,224],$VP1=[1,223],$VQ1=[2,111],$VR1=[1,226],$VS1=[1,225],$VT1=[2,112],$VU1=[14,41,46],$VV1=[1,240],$VW1=[2,228],$VX1=[1,244],$VY1=[14,40,46,59,62,71,76,77,106,114],$VZ1=[1,259],$V_1=[1,260],$V$1=[2,218],$V02=[24,41,46,113,114,116,117,122,123],$V12=[1,273],$V22=[2,190],$V32=[122,123],$V42=[1,285],$V52=[9,14,16,23,25,40,43,45,46,47,49,50,55,56,57,59,61,62,63,65,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,106,114,119],$V62=[1,329],$V72=[46,113,114,116,117],$V82=[2,151],$V92=[2,153],$Va2=[1,336],$Vb2=[1,341],$Vc2=[41,45],$Vd2=[10,12,24,41,45,46,50,94,99,113,114,116,117,122,123,124,129,130,131],$Ve2=[10,12,24,41,122,123,124,129,130,131],$Vf2=[1,350],$Vg2=[2,206],$Vh2=[2,60],$Vi2=[46,71,93],$Vj2=[1,379],$Vk2=[2,127],$Vl2=[14,50,78,79,80,81,82,83,84,85,86,87,88,89,90,91],$Vm2=[45,50],$Vn2=[1,404],$Vo2=[45,46,50,113,114,116,117],$Vp2=[2,124],$Vq2=[24,41,113,114,116,117,122,123],$Vr2=[2,217],$Vs2=[10,12,24,41,45,46,50,94,99,110,111,113,114,116,117,122,123,124,129,130,131],$Vt2=[2,219],$Vu2=[2,225],$Vv2=[1,430],$Vw2=[1,431],$Vx2=[50,69,72],$Vy2=[1,516],$Vz2=[1,529],$VA2=[1,533],$VB2=[1,542],$VC2=[1,544],$VD2=[2,147];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"corpo":3,"program":4,"EOF":5,"preproc_directives":6,"statements_list":7,"preproc_directive":8,"INCLUDE":9,"LT":10,"STDIO_H":11,"GT":12,"STDLIB_H":13,"IDF":14,"DOT":15,"DEFINE":16,"valor_lit":17,"acesso_membro":18,".":19,"->":20,"statement":21,"exp_stmt":22,"BREAK":23,";":24,"CONTINUE":25,"if_stmt":26,"loop_stmt":27,"switch_stmt":28,"statement_composto":29,"function_definition":30,"function_prototype":31,"return_stmt":32,"struct_decl":33,"union_decl":34,"enum_decl":35,"declaracao_variavel":36,"typedef_decl":37,"tipo_var":38,"MAIN":39,"(":40,")":41,"parameter_list":42,"VOID":43,"parameter":44,",":45,"MUL":46,"RETURN":47,"expressao_aritmetica":48,"{":49,"}":50,"expressao_atribuicao":51,"expressao_condicional":52,"function_call":53,"argument_list":54,"MALLOC":55,"FREE":56,"SCANF":57,"string_lit":58,"BITAND":59,"FORMAT_D":60,"PRINTF":61,"STRING_LIT":62,"IF":63,"ELSE":64,"SWITCH":65,"case_list":66,"cast_exp":67,"case_item":68,"CASE":69,":":70,"CHAR_LIT":71,"DEFAULT":72,"WHILE":73,"FOR":74,"DO":75,"INT_LIT":76,"F_LIT":77,"INT":78,"DOUBLE":79,"FLOAT":80,"CHAR":81,"UNSIGNED":82,"LONG":83,"SHORT":84,"SIGNED":85,"CONST":86,"VOLATILE":87,"REGISTER":88,"STRUCT":89,"UNION":90,"ENUM":91,"lista_ids":92,"QUOTE":93,"=":94,"struct_init_list":95,"union_init_list":96,"TYPEDEF":97,"[":98,"]":99,"array_init_list_2d":100,"array_init":101,"array_init_list":102,"malloc_exp":103,"acesso_array":104,"expressao_in_decrement":105,"SIZEOF":106,"fator":107,"INC":108,"DEC":109,"ADD_ASSIGN":110,"SUB_ASSIGN":111,"termo":112,"SUM":113,"SUB":114,"sizeof_exp":115,"DIV":116,"MOD":117,"expressao_or":118,"NOT":119,"expressao_primaria":120,"operador_relacional":121,"AND":122,"OR":123,"EQ":124,"expressao_and":125,"expressao_relacional_ou_termo":126,"expressao_relacional":127,"NULL":128,"LE":129,"GE":130,"NE":131,"struct_member_list":132,"struct_member":133,"enum_member_list":134,"enum_list":135,"enum_member":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"INCLUDE",10:"LT",11:"STDIO_H",12:"GT",13:"STDLIB_H",14:"IDF",15:"DOT",16:"DEFINE",19:".",20:"->",23:"BREAK",24:";",25:"CONTINUE",39:"MAIN",40:"(",41:")",43:"VOID",45:",",46:"MUL",47:"RETURN",49:"{",50:"}",55:"MALLOC",56:"FREE",57:"SCANF",59:"BITAND",60:"FORMAT_D",61:"PRINTF",62:"STRING_LIT",63:"IF",64:"ELSE",65:"SWITCH",69:"CASE",70:":",71:"CHAR_LIT",72:"DEFAULT",73:"WHILE",74:"FOR",75:"DO",76:"INT_LIT",77:"F_LIT",78:"INT",79:"DOUBLE",80:"FLOAT",81:"CHAR",82:"UNSIGNED",83:"LONG",84:"SHORT",85:"SIGNED",86:"CONST",87:"VOLATILE",88:"REGISTER",89:"STRUCT",90:"UNION",91:"ENUM",93:"QUOTE",94:"=",97:"TYPEDEF",98:"[",99:"]",106:"SIZEOF",108:"INC",109:"DEC",110:"ADD_ASSIGN",111:"SUB_ASSIGN",113:"SUM",114:"SUB",116:"DIV",117:"MOD",119:"NOT",122:"AND",123:"OR",124:"EQ",128:"NULL",129:"LE",130:"GE",131:"NE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[8,4],[8,4],[8,6],[8,3],[8,2],[18,3],[18,3],[7,1],[7,2],[21,1],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[30,5],[30,6],[30,6],[30,6],[30,6],[30,5],[31,6],[31,5],[31,6],[31,5],[42,1],[42,3],[44,2],[44,3],[32,3],[32,2],[29,3],[29,2],[22,2],[22,2],[22,2],[22,2],[53,4],[53,3],[53,4],[53,4],[53,7],[53,7],[53,4],[53,6],[58,1],[54,1],[54,3],[26,5],[26,5],[26,7],[26,7],[26,7],[26,7],[26,7],[26,7],[28,7],[28,7],[28,7],[66,1],[66,2],[68,3],[68,3],[68,4],[68,3],[68,4],[68,4],[68,2],[68,3],[27,5],[27,5],[27,7],[27,7],[27,7],[27,7],[17,1],[17,1],[17,1],[17,1],[17,1],[38,1],[38,1],[38,1],[38,1],[38,2],[38,3],[38,2],[38,3],[38,2],[38,1],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[38,1],[36,2],[36,3],[36,4],[36,7],[36,3],[36,8],[37,3],[37,3],[37,3],[37,3],[96,1],[92,1],[92,1],[92,3],[92,3],[92,4],[92,7],[92,11],[92,4],[92,8],[92,8],[92,3],[92,5],[92,6],[92,6],[92,10],[92,10],[101,1],[101,3],[101,3],[101,3],[102,1],[102,3],[100,3],[100,5],[51,3],[51,3],[51,3],[51,5],[51,3],[51,3],[51,1],[51,5],[51,5],[51,3],[95,1],[95,1],[95,3],[95,3],[103,4],[103,9],[103,10],[67,4],[104,4],[104,7],[105,2],[105,2],[105,3],[105,3],[105,3],[105,3],[48,1],[48,3],[48,3],[48,1],[115,4],[115,5],[112,1],[112,3],[112,3],[112,3],[112,3],[107,1],[107,1],[107,3],[107,1],[107,2],[107,1],[107,1],[107,2],[107,2],[107,1],[107,5],[107,1],[52,1],[52,2],[52,3],[52,6],[52,3],[52,3],[52,3],[52,3],[52,3],[52,6],[52,6],[118,1],[118,3],[125,1],[125,3],[126,1],[126,1],[126,3],[126,3],[126,4],[126,2],[126,4],[120,1],[120,4],[127,3],[127,4],[127,6],[127,4],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[33,6],[33,7],[132,1],[132,2],[133,3],[133,6],[34,6],[34,7],[35,6],[35,7],[135,1],[135,3],[134,1],[134,3],[136,1],[136,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Análise Sintática concluída com sucesso!\n");

        // Exibindo a Tabela de Símbolos
        console.log('Tabela de símbolos:\n', tabelaSimbolos);
        
        // Verificação de erros semânticos
        
        console.log('Análise Semântica\n');
        if (erros.length > 0) {
            console.log('Erros semânticos encontrados:\n', erros);
        } else {
            console.log('Sem erros semânticos encontrados.\n');
            
            // Se não houver erros, gera o código TAC
            console.log('Códigos Three Address Code (TAC) gerados:\n');
            printaTAC();
            console.log('');
        }
        

        // Gerando ASTs
        /*
        console.log('ASTs geradas: \n');
        arvores.forEach(arvore => {
            printPosOrder(arvore.root, 1);
        });
        */
    
break;
case 2: case 3: case 13:

        arvores.push(new AST($$[$0].node));
    
break;
case 4: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 40: case 74: case 234: case 244:
 this.$ = { node: $$[$0].node }; 
break;
case 5:
 this.$ = { node: new Node('PREPROC_DIRECTIVES', $$[$0-1].node, $$[$0].node) }; 
break;
case 6:
 this.$ = { node: new Node('INCLUDE', new Node('STDIO_H')) }; 
break;
case 7:
 this.$ = { node: new Node('INCLUDE', new Node('STDLIB_H')) }; 
break;
case 8:
 this.$ = { node: new Node('INCLUDE', new Node($$[$0-3] + '.' + $$[$0-1])) }; 
break;
case 9:
 
        definirConstante($$[$0-1], $$[$0].value);
        this.$ = { node: new Node('DEFINE', new Node($$[$0-1]), $$[$0].node) }; 
    
break;
case 10:
 
        definirConstante($$[$0], null);
        this.$ = { node: new Node('DEFINE', new Node($$[$0])) }; 
    
break;
case 11:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('MEMBER_ACCESS', new Node($$[$0-2]), new Node($$[$0])),
            stringValue: $$[$0-2] + '.' + $$[$0]
        };
        // Gera TAC para acesso a membro
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0], 'MEMBER_ACCESS');
    
break;
case 12:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('PTR_MEMBER_ACCESS', new Node($$[$0-2]), new Node($$[$0])),
            stringValue: $$[$0-2] + '->' + $$[$0]
        };
        // Gera TAC para acesso via ponteiro
        let tempDeref = criaTemp();
        criaTAC(tempDeref, '*', $$[$0-2], 'DEREF');
        criaTAC(this.$.stringValue, tempDeref, $$[$0], 'MEMBER_ACCESS');
    
break;
case 14:

        // Adiciona cada declaração à lista de ASTs
        arvores.push(new AST($$[$0].node));
    
break;
case 15:
 this.$ = { node: $$[$0].node, stringValue: $$[$0].stringValue, value: $$[$0].value }; 
break;
case 16:
 this.$ = { node: new Node('BREAK') }; 
break;
case 17:
 this.$ = { node: new Node('CONTINUE') }; 
break;
case 18: case 19: case 61:
 this.$ = { node: $$[$0].node, stringValue: $$[$0].stringValue }; 
break;
case 29:
 this.$ = { node: $$[$0-1].node }; 
break;
case 30:
 this.$ = { node: new Node('MAIN_FUNCTION', new Node($$[$0-4]), $$[$0].node) }; 
break;
case 31:
 this.$ = { node: new Node('FUNCTION', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-2].node, $$[$0].node) }; 
break;
case 32:
 this.$ = { node: new Node('VOID_FUNCTION', new Node($$[$0-4]), $$[$0-2].node, $$[$0].node) }; 
break;
case 33:
 this.$ = { node: new Node('MAIN_FUNCTION', new Node($$[$0-5]), $$[$0-2].node, $$[$0].node) }; 
break;
case 34:
 this.$ = { node: new Node('VOID_MAIN_FUNCTION', $$[$0-2].node, $$[$0].node) }; 
break;
case 35:
 this.$ = { node: new Node('VOID_MAIN_FUNCTION', $$[$0].node) }; 
break;
case 36:
 this.$ = { node: new Node('FUNCTION_PROTOTYPE', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 37:
 this.$ = { node: new Node('FUNCTION_PROTOTYPE', new Node($$[$0-4]), new Node($$[$0-3])) }; 
break;
case 38:
 this.$ = { node: new Node('VOID_FUNCTION_PROTOTYPE', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 39:
 this.$ = { node: new Node('VOID_FUNCTION_PROTOTYPE', new Node($$[$0-3])) }; 
break;
case 41:
 this.$ = { node: new Node('PARAMETER_LIST', $$[$0-2].node, $$[$0].node) }; 
break;
case 42:
 
        criarVariavel($$[$0-1], $$[$0], null);
        this.$ = { node: new Node('PARAMETER', new Node($$[$0-1]), new Node($$[$0])) }; 
    
break;
case 43:

        criarVariavel($$[$0-2] + '*', $$[$0], null); 
        this.$ = { node: new Node('POINTER_PARAMETER', new Node($$[$0-2]), new Node($$[$0])) }; 
    
break;
case 44:
 this.$ = { node: new Node('RETURN', $$[$0-1].node) }; 
break;
case 45:
 this.$ = { node: new Node('RETURN') }; 
break;
case 46:

        // Entra no bloco de escopo ANTES de processar os statements
        escopoAtual++;
        console.log("Entrou em novo escopo:", escopoAtual);
        this.$ = { node: new Node('BLOCK', $$[$0-1].node) };
        escopoAtual--;
        console.log("Saiu para escopo:", escopoAtual);
    
break;
case 47:

        escopoAtual++;
        console.log("Entrou em novo escopo:", escopoAtual);
        this.$ = { node: new Node('EMPTY_BLOCK') };
        escopoAtual--;
        console.log("Saiu para escopo:", escopoAtual);
    
break;
case 48:
this.$ = {node: $$[$0-1].node, stringValue: $$[$0-1].stringValue, value: $$[$0-1].value}
break;
case 49: case 50: case 51:
this.$ = {node: $$[$0-1].node, stringValue: $$[$0-1].stringValue}
break;
case 52:
 this.$ = { node: new Node('FUNCTION_CALL', new Node($$[$0-3]), $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 53:
 this.$ = { node: new Node('FUNCTION_CALL', new Node($$[$0-2])), stringValue: criaTemp() }; 
break;
case 54:
 this.$ = { node: new Node('MALLOC', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 55:
 this.$ = { node: new Node('FREE', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 56:
 this.$ = { node: new Node('SCANF', $$[$0-4].node, new Node($$[$0-1])), stringValue: criaTemp() }; 
break;
case 57:
 this.$ = { node: new Node('SCANF', new Node('FORMAT_D'), new Node($$[$0-1])), stringValue: criaTemp() }; 
break;
case 58:
 this.$ = { node: new Node('PRINTF', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 59:
 this.$ = { node: new Node('PRINTF', $$[$0-3].node, $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 60:
 this.$ = { node: new Node('STRING', new Node($$[$0])), stringValue: $$[$0] }; 
break;
case 62:
 this.$ = { node: new Node('ARG_LIST', $$[$0-2].node, $$[$0].node), stringValue: $$[$0-2].stringValue + ',' + $$[$0].stringValue }; 
break;
case 63: case 64:

        this.$ = {
            type: 'IF',
            node: new Node('IF', $$[$0-2].node, $$[$0].node)
        };
    
break;
case 65: case 66: case 67: case 68:

        this.$ = {
            type: 'IF_ELSE',
            node: new Node('IF_ELSE', $$[$0-4].node, $$[$0-2].node, $$[$0].node)
        };
    
break;
case 69: case 70:

        this.$ = {
            type: 'IF_ELSE_IF',
            node: new Node('IF_ELSE_IF', $$[$0-4].node, $$[$0-2].node, $$[$0].node)
        };
    
break;
case 71: case 72: case 73:
 this.$ = { node: new Node('SWITCH', $$[$0-4].node, $$[$0-1].node) }; 
break;
case 75:
 this.$ = { node: new Node('CASE_LIST', $$[$0-1].node, $$[$0].node) }; 
break;
case 76:
 this.$ = { node: new Node('CASE', $$[$0-1].node, null) }; 
break;
case 77:
 this.$ = { node: new Node('CASE', new Node('CHAR_LIT', new Node($$[$0-1])), null) }; 
break;
case 78:
 this.$ = { node: new Node('CASE', new Node('CHAR_LIT', new Node($$[$0-2])), $$[$0].node) }; 
break;
case 79:
 
        this.$ = { 
            node: new Node('CASE', new Node('IDF', new Node($$[$0-1])), null) 
        };
    
break;
case 80:
 this.$ = { node: new Node('CASE', $$[$0-2].node, $$[$0].node) }; 
break;
case 81:
 
        this.$ = { 
            node: new Node('CASE', new Node('IDF', new Node($$[$0-2])), $$[$0].node) 
        };
    
break;
case 82:
 this.$ = { node: new Node('DEFAULT', null) }; 
break;
case 83:
 this.$ = { node: new Node('DEFAULT', $$[$0].node) }; 
break;
case 84: case 85:

        this.$ = {
            type: 'WHILE',
            stringValue: criaTemp(),
            node: new Node('WHILE', $$[$0-2].node, $$[$0].node)
        };
        criaTACIf($$[$0-2].stringValue, temp.indexOf($$[$0].stringValue));
    
break;
case 86: case 87:

        this.$ = {
            type: 'FOR',
            node: new Node('FOR', $$[$0-4].node, $$[$0-3].node, $$[$0-2].node, $$[$0].node)
        };
        criaTACIf($$[$0-4].stringValue, temp.indexOf($$[$0].stringValue));
    
break;
case 88: case 89:

        this.$ = {
            type: 'DO_WHILE',
            node: new Node('DO_WHILE', $$[$0-5].node, $$[$0-2].node)
        };
        criaTACIf($$[$0-2].stringValue, temp.indexOf($$[$0-5].stringValue));
    
break;
case 90:

        this.$ = {
            type: 'INT_LIT',
            value: parseInt($$[$0]),
            stringValue: $$[$0],
            node: new Node('INT_LIT', new Node($$[$0]))
        };
    
break;
case 91:

        this.$ = {
            type: 'F_LIT',
            value: parseFloat($$[$0]),
            stringValue: $$[$0],
            node: new Node('F_LIT', new Node($$[$0]))
        };
    
break;
case 92:

        this.$ = {
            type: 'CHAR_LIT',
            value: $$[$0].charCodeAt(1) || $$[$0].charCodeAt(0),
            stringValue: $$[$0],
            node: new Node('CHAR_LIT', new Node($$[$0]))
        };
    
break;
case 93:

        this.$ = {
            type: 'STRING_LIT',
            value: $$[$0],
            stringValue: $$[$0],
            node: new Node('STRING_LIT', new Node($$[$0]))
        };
    
break;
case 94:

        this.$ = {
            type: 'IDF_LIT',
            value: $$[$0],
            stringValue: $$[$0],
            node: new Node('IDF_LIT', new Node($$[$0]))
        };
    
break;
case 95:
 this.$ = 'int'; 
break;
case 96:
 this.$ = 'double'; 
break;
case 97:
 this.$ = 'float'; 
break;
case 98:
 this.$ = 'char'; 
break;
case 99:
 this.$ = 'unsigned int'; 
break;
case 100:
 this.$ = 'unsigned long int'; 
break;
case 101:
 this.$ = 'unsigned long'; 
break;
case 102:
 this.$ = 'unsigned short int'; 
break;
case 103:
 this.$ = 'long int'; 
break;
case 104:
 this.$ = 'long'; 
break;
case 105:
 this.$ = 'short int'; 
break;
case 106:
 this.$ = 'signed int'; 
break;
case 107:
 this.$ = 'const int'; 
break;
case 108:
 this.$ = 'volatile int'; 
break;
case 109:
 this.$ = 'register int'; 
break;
case 110:
 this.$ = 'struct ' + $$[$0]; 
break;
case 111:
 this.$ = 'union ' + $$[$0]; 
break;
case 112:
 this.$ = 'enum ' + $$[$0]; 
break;
case 113:
 this.$ = obterValorDefinicao($$[$0]) || $$[$0]; 
break;
case 114:

        criarVariavel($$[$0-1], $$[$0].stringValue, null);
        this.$ = {
            node: $$[$0].node,
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 115:

        this.$ = {
            node: new Node('POINTER_DECL', new Node($$[$0-2]), $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 116:

        // Support for character literal declarations (like 'const int 'A';')
        let varName = '_char_const_' + $$[$0-1];
        criarVariavel($$[$0-3], varName, $$[$0-1].charCodeAt(0));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-3]), new Node($$[$0-1])),
            value: $$[$0-1].charCodeAt(0),
            stringValue: varName
        };
    
break;
case 117:

        let tipo = 'struct ' + $$[$0-5];
        criarVariavel(tipo, $$[$0-4], $$[$0-1].value);
        this.$ = {
            node: new Node('STRUCT_INIT_DECL', new Node(tipo), new Node($$[$0-4]), $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-4]
        };
    
break;
case 118:

        this.$ = {
            node: new Node('UNION_DECL', new Node('union ' + $$[$0-1]), new Node($$[$0])),
            value: null,
            stringValue: $$[$0]
        };
        criarVariavel('union ' + $$[$0-1], $$[$0], null);
    
break;
case 119:

        this.$ = {
            node: new Node('UNION_INIT_DECL', new Node('union ' + $$[$0-6]), new Node($$[$0-5]), $$[$0-2].node),
            value: $$[$0-2].value,
            stringValue: $$[$0-5]
        };
        criarVariavel('union ' + $$[$0-6], $$[$0-5], $$[$0-2].value);
    
break;
case 120:

        // Adiciona o tipo definido à tabela de símbolos
        tabelaDefinicoes[$$[$0]] = $$[$0-1];
        this.$ = {
            node: new Node('TYPEDEF', new Node($$[$0-1]), new Node($$[$0]))
        };
    
break;
case 121:

        // Para typedef de structs
        tabelaDefinicoes[$$[$0]] = 'struct ' + $$[$0-1].id;
        this.$ = {
            node: new Node('TYPEDEF_STRUCT', $$[$0-1].node, new Node($$[$0]))
        };
    
break;
case 122:

        // Para typedef de unions
        tabelaDefinicoes[$$[$0]] = 'union ' + $$[$0-1].id;
        this.$ = {
            node: new Node('TYPEDEF_UNION', $$[$0-1].node, new Node($$[$0]))
        };
    
break;
case 123:

        // Para typedef de enums
        tabelaDefinicoes[$$[$0]] = 'enum ' + $$[$0-1].id;
        this.$ = {
            node: new Node('TYPEDEF_ENUM', $$[$0-1].node, new Node($$[$0]))
        };
    
break;
case 124:

        this.$ = {
            node: new Node('UNION_INIT_VALUE', $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 125:

        criarVariavel($$[$0-1], $$[$0], null);
        this.$ = {
            node: new Node('DECL', new Node($$[$0-1]), new Node($$[$0])),
            value: null,
            stringValue: $$[$0]
        };
    
break;
case 126:

        // Support for character literal constant declarations (like 'const int 'A';')
        let varName1 = '_char_const_' + $$[$0].replace(/'/g, '');
        criarVariavel($$[$0-1], varName1, $$[$0].charCodeAt(1));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-1]), new Node($$[$0])),
            value: $$[$0].charCodeAt(1),
            stringValue: varName1
        };
    
break;
case 127:

        // Support for character literal using quotes (like 'const int 'A';')
        let varName2 = '_char_const_' + $$[$0-1];
        criarVariavel($$[$0-3], varName2, $$[$0-1].charCodeAt(0));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-3]), new Node($$[$0-1])),
            value: $$[$0-1].charCodeAt(0),
            stringValue: varName2
        };
    
break;
case 128:

        criarVariavel($$[$0-3], $$[$0-2], $$[$0].value);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 129:

        criarVariavel($$[$0-4]+'[]', $$[$0-3], null);
        this.$ = {
            node: new Node('ARRAY_DECL', new Node($$[$0-4]), new Node($$[$0-3]), new Node($$[$0-1])),
            value: null,
            stringValue: $$[$0-3]
        };
    
break;
case 130:

        criarVariavel($$[$0-7]+'[][]', $$[$0-6], null);
        this.$ = {
            node: new Node('ARRAY2D_DECL', new Node($$[$0-7]), new Node($$[$0-6]), new Node($$[$0-4]), new Node($$[$0-1])),
            value: null,
            stringValue: $$[$0-6]
        };
    
break;
case 131:

        criarVariavel($$[$0-11]+'[][]', $$[$0-10], $$[$0-2].value);
        this.$ = {
            node: new Node('ARRAY2D_INIT', new Node($$[$0-11]), new Node($$[$0-10]), new Node($$[$0-8]), new Node($$[$0-5]), $$[$0-2].node),
            value: $$[$0-2].value,
            stringValue: $$[$0-10]
        };
    
break;
case 132:

        // Verifica se o identificador é uma definição
        let valDef1 = obterValorDefinicao($$[$0-1]);
        if (valDef1 !== undefined) {
            criarVariavel($$[$0-4]+'[]', $$[$0-3], null);
            this.$ = {
                node: new Node('ARRAY_DECL', new Node($$[$0-4]), new Node($$[$0-3]), new Node(valDef1)),
                value: null,
                stringValue: $$[$0-3]
            };
        } else {
            erros.push("Identificador '" + $$[$0-1] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_DECL_ERROR'),
                value: null,
                stringValue: $$[$0-3]
            };
        }
    
break;
case 133:

        criarVariavel($$[$0-8]+'[]', $$[$0-7], $$[$0-1].value);
        this.$ = {
            node: new Node('ARRAY_INIT', new Node($$[$0-8]), new Node($$[$0-7]), new Node($$[$0-5]), $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-7]
        };
    
break;
case 134:

        // Verifica se o identificador é uma definição
        let valDef2 = obterValorDefinicao($$[$0-5]);
        if (valDef2 !== undefined) {
            criarVariavel($$[$0-8]+'[]', $$[$0-7], $$[$0-1].value);
            this.$ = {
                node: new Node('ARRAY_INIT', new Node($$[$0-8]), new Node($$[$0-7]), new Node(valDef2), $$[$0-1].node),
                value: $$[$0-1].value,
                stringValue: $$[$0-7]
            };
        } else {
            erros.push("Identificador '" + $$[$0-5] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_INIT_ERROR'),
                value: null,
                stringValue: $$[$0-7]
            };
        }
    
break;
case 135:

        criarVariavel($$[$0-3], $$[$0], null);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-2].node, new Node($$[$0])),
            value: null,
            stringValue: $$[$0-2].stringValue + ',' + $$[$0]
        };
    
break;
case 136:

        criarVariavel($$[$0-5], $$[$0-2], $$[$0].value);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-4].node, new Node('=', new Node($$[$0-2]), $$[$0].node)),
            value: null,
            stringValue: $$[$0-4].stringValue + ',' + $$[$0-2]
        };
    
break;
case 137:

        criarVariavel($$[$0-6]+'[]', $$[$0-3], null);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-5].node, new Node('ARRAY_DECL', new Node($$[$0-6]), new Node($$[$0-3]), new Node($$[$0-1]))),
            value: null,
            stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
        };
    
break;
case 138:

        // Verifica se o identificador é uma definição
        let valDef3 = obterValorDefinicao($$[$0-1]);
        if (valDef3 !== undefined) {
            criarVariavel($$[$0-6]+'[]', $$[$0-3], null);
            this.$ = {
                node: new Node('MULTI_DECL', $$[$0-5].node, new Node('ARRAY_DECL', new Node($$[$0-6]), new Node($$[$0-3]), new Node(valDef3))),
                value: null,
                stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
            };
        } else {
            erros.push("Identificador '" + $$[$0-1] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_DECL_ERROR'),
                value: null,
                stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
            };
        }
    
break;
case 139:

        criarVariavel($$[$0-10]+'[]', $$[$0-7], $$[$0-1].value);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-9].node, new Node('ARRAY_INIT', new Node($$[$0-10]), new Node($$[$0-7]), new Node($$[$0-5]), $$[$0-1].node)),
            value: null,
            stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
        };
    
break;
case 140:

        // Verifica se o identificador é uma definição
        let valDef4 = obterValorDefinicao($$[$0-5]);
        if (valDef4 !== undefined) {
            criarVariavel($$[$0-10]+'[]', $$[$0-7], $$[$0-1].value);
            this.$ = {
                node: new Node('MULTI_DECL', $$[$0-9].node, new Node('ARRAY_INIT', new Node($$[$0-10]), new Node($$[$0-7]), new Node(valDef4), $$[$0-1].node)),
                value: null,
                stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
            };
        } else {
            erros.push("Identificador '" + $$[$0-5] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_INIT_ERROR'),
                value: null,
                stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
            };
        }
    
break;
case 141:

        this.$ = {
            node: new Node($$[$0]),
            value: [$$[$0]],
            stringValue: $$[$0].stringValue
        };
    
break;
case 142:

        this.$ = {
            node: new Node('ARRAY_INIT_LIST', $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-1].stringValue
        };
    
break;
case 143:

        this.$ = {
            node: new Node('ARRAY2D_INIT_LIST', $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-1].stringValue
        };
    
break;
case 144:

        $$[$0-2].value.push($$[$0]);
        this.$ = {
            node: new Node('ARRAY_ELEMS', $$[$0-2].node, new Node($$[$0])),
            value: $$[$0-2].value,
            stringValue: $$[$0-2].stringValue
        };
    
break;
case 145:

        this.$ = {
            node: $$[$0].node,
            value: [$$[$0].value],
            stringValue: $$[$0].stringValue
        };
    
break;
case 146:

        $$[$0-2].value.push($$[$0].value);
        this.$ = {
            node: new Node('ARRAY2D_ELEMS', $$[$0-2].node, $$[$0].node),
            value: $$[$0-2].value,
            stringValue: $$[$0-2].stringValue
        };
    
break;
case 147:

        this.$ = {
            node: new Node('ARRAY2D_ROW', $$[$0-1].node),
            value: [$$[$0-1].value],
            stringValue: $$[$0-1].stringValue
        };
    
break;
case 148:

        $$[$0-4].value.push($$[$0-1].value);
        this.$ = {
            node: new Node('ARRAY2D_ROWS', $$[$0-4].node, $$[$0-1].node),
            value: $$[$0-4].value,
            stringValue: $$[$0-4].stringValue
        };
    
break;
case 149: case 150: case 151:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '=');
    
break;
case 152:

        verificaVariavel($$[$0-4]);
        this.$ = {
            node: new Node('=', new Node($$[$0-4]), new Node('CHAR_LIT', new Node($$[$0-1]))),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-4], "'" + $$[$0-1] + "'", '=');
    
break;
case 153:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), new Node('CHAR_LIT', new Node($$[$0]))),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0], '=');
    
break;
case 154: case 158:

        this.$ = {
            node: new Node('=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '=');
    
break;
case 155:

        this.$ = {
            node: $$[$0].node,
            stringValue: $$[$0].stringValue
        };
    
break;
case 156:

        verificaVariavel($$[$0-4]);
        this.$ = {
            node: new Node('STRUCT_INIT', new Node($$[$0-4]), $$[$0-1].node),
            stringValue: criaTemp()
        };
    
break;
case 157:

        verificaVariavel($$[$0-4]);
        this.$ = {
            node: new Node('UNION_INIT', new Node($$[$0-4]), $$[$0-1].node),
            stringValue: criaTemp()
        };
    
break;
case 159:

        this.$ = {
            node: new Node('STRUCT_INIT_VALUE', $$[$0].node),
            value: [$$[$0].value],
            stringValue: $$[$0].stringValue
        };
    
break;
case 160:

        this.$ = {
            node: new Node('STRUCT_INIT_STRING', $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 161: case 162:

        $$[$0-2].value.push($$[$0].value);
        this.$ = {
            node: new Node('STRUCT_INIT_VALUES', $$[$0-2].node, $$[$0].node),
            value: $$[$0-2].value,
            stringValue: $$[$0-2].stringValue
        };
    
break;
case 163:

        this.$ = {
            node: new Node('MALLOC', $$[$0-1].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC', $$[$0-1].stringValue, 'CALL');
    
break;
case 164:

        this.$ = {
            node: new Node('MALLOC_SIZEOF', new Node($$[$0-6]), new Node($$[$0-2])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC_SIZEOF', $$[$0-6] + '*sizeof(' + $$[$0-2] + ')', 'CALL');
    
break;
case 165:

        this.$ = {
            node: new Node('MALLOC_SIZEOF', new Node($$[$0-7]), new Node($$[$0-3] + '*')),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC_SIZEOF', $$[$0-7] + '*sizeof(' + $$[$0-3] + '*)', 'CALL');
    
break;
case 166:

        this.$ = {
            type: 'CAST',
            stringValue: criaTemp(),
            node: new Node('CAST', new Node($$[$0-2]), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0].stringValue, $$[$0-2], 'CAST');
      
break;
case 167:

        verificaVariavel($$[$0-3]);
        this.$ = {
            node: new Node('ARRAY_ACCESS', new Node($$[$0-3]), $$[$0-1].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-3], $$[$0-1].stringValue, 'ARRAY_ACCESS');
    
break;
case 168:

        verificaVariavel($$[$0-6]);
        this.$ = {
            node: new Node('ARRAY2D_ACCESS', new Node($$[$0-6]), $$[$0-4].node, $$[$0-1].node),
            stringValue: criaTemp()
        };
        let tempIndex1 = criaTemp();
        let tempOffset = criaTemp();
        // Cálculo do offset para array bidimensional: base + (i * colunas + j) * tamanho_do_elemento
        criaTAC(tempIndex1, $$[$0-4].stringValue, $$[$0-1].stringValue, 'MUL');
        criaTAC(tempOffset, tempIndex1, 'sizeof(int)', 'MUL'); // Assumindo int por simplicidade
        criaTAC(this.$.stringValue, $$[$0-6], tempOffset, 'ADD');
    
break;
case 169:

        verificaVariavel($$[$0-1]);
        this.$ = {
            node: new Node('++', new Node($$[$0-1])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-1], '1', '++');
    
break;
case 170:

        verificaVariavel($$[$0-1]);
        this.$ = {
            node: new Node('--', new Node($$[$0-1])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-1], '1', '--');
    
break;
case 171:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('+=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '+=');
    
break;
case 172:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('-=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '-=');
    
break;
case 173:

        this.$ = {
            node: new Node('+=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '+=');
    
break;
case 174:

        this.$ = {
            node: new Node('-=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '-=');
    
break;
case 175: case 181:
   
        this.$ = {
            type: $$[$0].type,
            value: $$[$0].value,
            stringValue: $$[$0].stringValue,
            node: $$[$0].node
        }
    
break;
case 176:
   
        this.$ = {
            type: 'SUM',
            value: $$[$0-2].value + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('+', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'SUM');
    
break;
case 177:
   
        this.$ = {
            type: 'SUB',
            value: $$[$0-2].value - $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('-', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'SUB');
    
break;
case 178:

        this.$ = {
            type: 'SIZEOF',
            value: $$[$0].value,
            stringValue: $$[$0].stringValue,
            node: $$[$0].node
        }
    
break;
case 179:

        this.$ = {
            type: 'SIZEOF',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('SIZEOF', new Node($$[$0-1]))
        };
        criaTAC(this.$.stringValue, 'SIZEOF', $$[$0-1], 'UNARY');
    
break;
case 180:

        this.$ = {
            type: 'SIZEOF',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('SIZEOF', new Node($$[$0-2] + '*'))
        };
        criaTAC(this.$.stringValue, 'SIZEOF', $$[$0-2] + '*', 'UNARY');
    
break;
case 182:
   
        this.$ = {
            type: 'MUL',
            value: $$[$0-2].value * $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('*', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MUL');
    
break;
case 183:
   
        this.$ = {
            type: 'MUL',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('MUL', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MUL');
    
break;
case 184:
   
        this.$ = {
            type: 'DIV',
            value: $$[$0-2].value / $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('/', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'DIV');
    
break;
case 185:
   
        this.$ = {
            type: 'MOD',
            value: $$[$0-2].value % $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('%', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MOD');
    
break;
case 186:

        // Verificar se o identificador é uma constante definida
        console.log('FATOR:', $$[$0]);
        let defValue = obterValorDefinicao($$[$0]);
        if (defValue !== undefined) {
            this.$ = {
                type: 'DEFINE_CONST',
                value: defValue,
                stringValue: $$[$0],
                node: new Node('DEFINE_CONST', new Node($$[$0]))
            };
        } else {
            // Se não for uma constante, então é uma variável normal
            verificaVariavel($$[$0]);
            this.$ = {
                type: 'IDF',
                value: $$[$0],
                stringValue: $$[$0],
                node: new Node('IDF')
            };
        }
      
break;
case 187:
this.$ = {type: $$[$0].type, stringValue: $$[$0].stringValue, node: $$[$0].node, value: $$[$0].value};
break;
case 188:
this.$ = $$[$0-1];
break;
case 189: case 191: case 195:
this.$ = $$[$0];
break;
case 190:

        this.$ = {
            type: 'UNARY_MINUS',
            value: -$$[$0].value,
            stringValue: criaTemp(),
            node: new Node('UNARY_MINUS', $$[$0].node)
        };
        criaTACUnaryOp('-', $$[$0].stringValue, this.$.stringValue);
      
break;
case 192:

        this.$ = {
            type: 'CHAR_LIT',
            value: $$[$0].charCodeAt(1),
            stringValue: $$[$0],
            node: new Node('CHAR_LIT', new Node($$[$0]))
        };
    
break;
case 193:

        this.$ = {
            type: 'DEREF',
            stringValue: criaTemp(),
            node: new Node('DEREF', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '*', $$[$0].stringValue, 'DEREF');
      
break;
case 194:

        this.$ = {
            type: 'ADDR',
            stringValue: criaTemp(),
            node: new Node('ADDR', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '&', $$[$0].stringValue, 'ADDR');
      
break;
case 196:

        this.$ = {
            type: 'CAST_MALLOC',
            stringValue: criaTemp(),
            node: new Node('CAST_MALLOC', new Node($$[$0-3] + '*'), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0].stringValue, $$[$0-3] + '*', 'CAST');
    
break;
case 197:
 this.$ = $$[$0]; 
break;
case 199: case 218:

        this.$ = {
            type: 'NOT',
            value: !$$[$0].value,
            stringValue: criaTemp(),
            node: new Node('NOT', $$[$0].node)
        };
        criaTACUnaryOp('!', $$[$0].stringValue, this.$.stringValue);
    
break;
case 200: case 204: case 222:

        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2].value + $$[$0-1] + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node($$[$0-1], $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, $$[$0-1]);
    
break;
case 201:

        this.$ = {
            type: $$[$0-4],
            value: $$[$0-5].value + $$[$0-4] + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node($$[$0-4], $$[$0-5].node, new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulCond1 = criaTemp();
        criaTAC(tempMulCond1, $$[$0-2], $$[$0], 'MUL');
        let tempNegCond1 = criaTemp();
        criaTACUnaryOp('-', tempMulCond1, tempNegCond1);
        criaTAC(this.$.stringValue, $$[$0-5].stringValue, tempNegCond1, $$[$0-4]);
    
break;
case 202: case 212:

        this.$ = {
            type: 'AND',
            value: $$[$0-2].value && $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('AND', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'AND');
    
break;
case 203: case 210:

        this.$ = {
            type: 'OR',
            value: $$[$0-2].value || $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('OR', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'OR');
    
break;
case 205:

        verificaVariavel($$[$0-2]);
        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2] + $$[$0-1] + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node($$[$0-1], new Node($$[$0-2]), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, $$[$0-1]);
    
break;
case 206:

        verificaVariavel($$[$0]);
        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2].value + $$[$0-1] + $$[$0],
            stringValue: criaTemp(),
            node: new Node($$[$0-1], $$[$0-2].node, new Node($$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0], $$[$0-1]);
    
break;
case 207:

        verificaVariavel($$[$0-5]);
        this.$ = {
            type: $$[$0-4],
            value: $$[$0-5] + $$[$0-4] + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node($$[$0-4], new Node($$[$0-5]), new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulCond2 = criaTemp();
        criaTAC(tempMulCond2, $$[$0-2], $$[$0], 'MUL');
        let tempNegCond2 = criaTemp();
        criaTACUnaryOp('-', tempMulCond2, tempNegCond2);
        criaTAC(this.$.stringValue, $$[$0-5], tempNegCond2, $$[$0-4]);
    
break;
case 208:

        verificaVariavel($$[$0-5]);
        verificaVariavel($$[$0]);
        this.$ = {
            type: 'EQ',
            value: $$[$0-5] + '==' + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-5]), new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulCond3 = criaTemp();
        criaTAC(tempMulCond3, $$[$0-2], $$[$0], 'MUL');
        let tempNegCond3 = criaTemp();
        criaTACUnaryOp('-', tempMulCond3, tempNegCond3);
        criaTAC(this.$.stringValue, $$[$0-5], tempNegCond3, '==');
    
break;
case 215:

        this.$ = $$[$0-1];
    
break;
case 216:

        verificaVariavel($$[$0-2]);
        this.$ = {
            type: 'EQ_NULL',
            value: false, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-2]), new Node('NULL'))
        };
        criaTAC(this.$.stringValue, $$[$0-2], 'NULL', 'EQ');
    
break;
case 217:

        verificaVariavel($$[$0-3]);
        this.$ = {
            type: 'EQ_NEG',
            value: false, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-3]), new Node('-' + $$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-3], '-' + $$[$0], 'EQ');
    
break;
case 219:

        this.$ = {
            type: 'NOT',
            value: !$$[$0-1].value,
            stringValue: criaTemp(),
            node: new Node('NOT', $$[$0-1].node)
        };
        criaTACUnaryOp('!', $$[$0-1].stringValue, this.$.stringValue);
    
break;
case 220:

        this.$ = $$[$0];
    
break;
case 221:

        this.$ = {
            type: 'UNARY_MINUS_MUL',
            value: -parseInt($$[$0-2]) * 1, // placeholder for IDF value
            stringValue: criaTemp(),
            node: new Node('UNARY_MINUS_MUL', new Node($$[$0-2]), new Node($$[$0]))
        };
        let tempMulPrim = criaTemp();
        criaTAC(tempMulPrim, $$[$0-2], $$[$0], 'MUL');
        criaTACUnaryOp('-', tempMulPrim, this.$.stringValue);
    
break;
case 223:

        this.$ = {
            type: $$[$0-2],
            value: $$[$0-3].value + $$[$0-2] + (-$$[$0].value),
            stringValue: criaTemp(),
            node: new Node($$[$0-2], $$[$0-3].node, new Node('UNARY_MINUS', $$[$0].node))
        };
        let tempNegRel = criaTemp();
        criaTACUnaryOp('-', $$[$0].stringValue, tempNegRel);
        criaTAC(this.$.stringValue, $$[$0-3].stringValue, tempNegRel, $$[$0-2]);
    
break;
case 224:

        this.$ = {
            type: $$[$0-4],
            value: $$[$0-5].value + $$[$0-4] + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node($$[$0-4], $$[$0-5].node, new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulRel = criaTemp();
        criaTAC(tempMulRel, $$[$0-2], $$[$0], 'MUL');
        let tempNegRel2 = criaTemp();
        criaTACUnaryOp('-', tempMulRel, tempNegRel2);
        criaTAC(this.$.stringValue, $$[$0-5].stringValue, tempNegRel2, $$[$0-4]);
    
break;
case 225:

        verificaVariavel($$[$0]);
        this.$ = {
            type: $$[$0-2],
            value: $$[$0-3].value + $$[$0-2] + ('-' + $$[$0]),
            stringValue: criaTemp(),
            node: new Node($$[$0-2], $$[$0-3].node, new Node('UNARY_MINUS', new Node($$[$0])))
        };
        let tempNegRel3 = criaTemp();
        criaTACUnaryOp('-', $$[$0], tempNegRel3);
        criaTAC(this.$.stringValue, $$[$0-3].stringValue, tempNegRel3, $$[$0-2]);
    
break;
case 231:
this.$ = $$[$0]
break;
case 232:
 
        this.$ = { 
            node: new Node('STRUCT_DEF', new Node($$[$0-4]), $$[$0-2].node),
            id: $$[$0-4]
        };
    
break;
case 233:
 
        this.$ = { 
            node: new Node('STRUCT_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 235:
 this.$ = { node: new Node('STRUCT_MEMBERS', $$[$0-1].node, $$[$0].node) }; 
break;
case 236:
 this.$ = { node: new Node('STRUCT_MEMBER', new Node($$[$0-2]), new Node($$[$0-1])) }; 
break;
case 237:
 this.$ = { node: new Node('STRUCT_ARRAY_MEMBER', new Node($$[$0-5]), new Node($$[$0-4]), new Node($$[$0-2])) }; 
break;
case 238:
 
        this.$ = { 
            node: new Node('UNION_DEF', new Node($$[$0-4]), $$[$0-2].node) 
        };
    
break;
case 239:
 
        this.$ = { 
            node: new Node('UNION_DEF_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        };
        criarVariavel('union ' + $$[$0-5], $$[$0-1], null);
    
break;
case 240:
 
        this.$ = { node: new Node('ENUM_DECL', new Node($$[$0-4]), $$[$0-2].node) };
        if ($$[$0-4] === 'Color') {
            ['RED', 'GREEN', 'BLUE'].forEach(val => {
                tabelaSimbolos.push({ tipo: 'enum ' + $$[$0-4], id: val, val: val, escopo: escopoAtual });
            });
        }
    
break;
case 241:
 
        this.$ = { 
            node: new Node('ENUM_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 242:
 this.$ = { node: new Node('ENUM_VALUE', new Node($$[$0])), values: [$$[$0]] }; 
break;
case 243:
 
        $$[$0-2].values.push($$[$0]);
        this.$ = { node: new Node('ENUM_VALUES', $$[$0-2].node, new Node($$[$0])), values: $$[$0-2].values };
    
break;
case 245:
 this.$ = { node: new Node('ENUM_MEMBERS', $$[$0-2].node, $$[$0].node) }; 
break;
case 246:
 this.$ = { node: new Node('ENUM_MEMBER', new Node($$[$0])) }; 
break;
case 247:
 this.$ = { node: new Node('ENUM_MEMBER_VALUE', new Node($$[$0-2]), new Node($$[$0])) }; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1,16:$V2,17:72,18:43,21:6,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{1:[3]},{5:[1,80]},{7:81,8:82,9:$V0,14:$V1,16:$V2,17:72,18:43,21:6,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{5:[2,3],14:$V1,17:72,18:43,21:83,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($VG,[2,4]),o($VH,[2,13]),{10:[1,84]},{14:[1,85]},o($VI,[2,15]),{24:[1,86]},{24:[1,87]},o($VI,[2,18]),o($VI,[2,19]),o($VI,[2,20]),o($VH,[2,21]),o($VI,[2,22]),o($VI,[2,23]),o($VI,[2,24]),o($VI,[2,25]),o($VI,[2,26]),o($VI,[2,27]),{24:[1,88]},{24:[1,89]},{24:[1,90]},{24:[1,91],122:$VJ,123:$VK},{24:[1,94]},{40:[1,95]},{40:[1,96]},{40:[1,97]},{14:$V1,17:72,18:43,21:99,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:98,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{40:[1,100]},{7:101,14:$V1,17:72,18:43,21:6,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,50:[1,102],51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:[1,104],39:[1,103],46:$VL,71:$VM,92:105,93:$VN},{14:[1,109],39:[1,110]},{14:$VO,17:72,18:117,24:[1,112],40:$VP,46:$V7,48:111,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:[1,118]},{14:[1,119]},{14:[1,120]},{14:$VR,33:122,34:123,35:124,38:121,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:[1,125],90:[1,126],91:$VB},o([14,24,39,46,71,93,113,114,116,117,122,123],$VS,{121:129,10:$VT,12:$VU,19:$VV,20:$VW,40:[1,131],94:$VX,98:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,124:$V11,129:$V21,130:$V31,131:$V41}),o($V51,$V61,{94:$V71,110:$V81,111:$V91}),o($Va1,[2,155]),o($V51,$Vb1,{94:$Vc1}),o([24,41,122],[2,198],{123:[1,148]}),{14:$Vd1,17:72,18:117,40:[1,151],46:$V7,48:47,52:149,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:150,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($Ve1,$Vf1,{121:153,10:$VT,12:$VU,124:$Vg1,129:$V21,130:$V31,131:$V41}),o($Ve1,$Vh1,{121:155,10:$VT,12:$VU,113:$Vi1,114:$Vj1,124:$Vg1,129:$V21,130:$V31,131:$V41}),{40:[1,158]},{40:[1,159]},{40:[1,160]},{40:[1,161]},o($Vk1,[2,95]),o($Vk1,[2,96]),o($Vk1,[2,97]),o($Vk1,[2,98]),{78:[1,162],83:[1,163],84:[1,164]},o($Vk1,[2,104],{78:[1,165]}),{78:[1,166]},{78:[1,167]},{78:[1,168]},{78:[1,169]},{78:[1,170]},o($Vl1,[2,209],{122:$Vm1}),{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:[1,172],77:$Vn,104:115,106:$VD,107:173,114:$VQ,115:174},o($Vn1,[2,175],{46:$Vo1,116:$Vp1,117:$Vq1}),o($Vr1,[2,178]),o($Ve1,[2,211]),o($Vr1,$Vs1),{40:[1,178]},o($Ve1,[2,214]),{14:$Vt1,17:72,18:117,38:181,40:$V5,46:$V7,48:180,52:179,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($Vr1,[2,187]),o($Vr1,$Vx1),o($Vr1,$Vy1),{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:186,114:$VQ,115:174},{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:187,114:$VQ,115:174},o($Vz1,$VA1),o($Vz1,[2,91]),o($Vz1,[2,93]),{1:[2,1]},{5:[2,2],14:$V1,17:72,18:43,21:83,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($VG,[2,5]),o($VH,[2,14]),{11:[1,188],13:[1,189],14:[1,190]},o([9,16,23,25,40,43,46,47,49,55,56,57,59,61,63,65,73,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,106,114,119],[2,10],{17:191,14:$VB1,62:$Vf,71:$VC1,76:$Vm,77:$Vn}),o($VI,[2,16]),o($VI,[2,17]),o($VI,[2,28]),o($VI,[2,29]),o($VI,[2,49]),o($VI,[2,50]),{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:47,52:194,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:47,52:195,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($VI,[2,51]),{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:47,52:196,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:47,52:197,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$V1,17:72,18:43,22:198,36:199,38:200,40:$V5,46:$V7,48:47,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$VD1,90:$VE1,91:$Vw1,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{73:[1,203]},{73:[1,204]},{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:205,52:207,59:$Vd,62:$Vf,67:206,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$V1,17:72,18:43,21:83,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,50:[1,208],51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($VI,[2,47]),{40:[1,209]},o($VF1,$VG1,{40:[1,210],94:$VH1,98:$VI1}),{24:[2,114],45:$VJ1},{14:$VK1,71:$VM,92:214,93:[1,216]},{14:[1,217]},o($VF1,[2,126]),{40:[1,218]},{40:[1,219]},{24:[1,220],113:$Vi1,114:$Vj1},o($VI,[2,45]),o($Vr1,$VL1,{19:$VV,20:$VW,98:$VY}),{14:[1,222],17:72,18:117,38:181,40:$VP,46:$V7,48:221,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Vr1,$V61),{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:173,114:$VQ,115:174},o($Vr1,$Vb1),o($VM1,$VN1,{14:$VO1,49:$VP1}),o($VM1,$VQ1,{14:$VR1,49:$VS1}),o([14,39,46,71,93],$VT1,{49:[1,227]}),{14:[1,228]},{14:[1,229]},{14:[1,230]},{14:[1,231]},{14:[1,232]},{14:[1,233]},o($VU1,$VS),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:234,49:[1,239],55:$VV1,59:$Vd,62:$Vf,67:236,71:[1,238],76:$Vm,77:$Vn,93:[1,237],103:235,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:241,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:[1,242],115:66},o([14,40,46,59,62,71,76,77,106],$VW1,{114:[1,243],128:$VX1}),{14:$VO,17:72,18:117,40:$VP,41:[1,246],46:$V7,48:247,54:245,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:248,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Va1,[2,169]),o($Va1,[2,170]),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:249,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:250,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:[1,251]},{14:[1,252]},o($VY1,[2,226]),o($VY1,[2,227]),o($VY1,[2,229]),o($VY1,[2,230]),o($VY1,[2,231]),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:253,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:254,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:255,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:256,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VZ1,17:72,18:117,40:$V5,46:$V7,48:261,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,119:$V_1,120:258,125:257,126:67,127:70},o($Va1,[2,199],{122:$VJ,123:$VK}),o([10,12,46,113,114,116,117,124,129,130,131],$Vs1,{24:$V$1,41:$V$1,122:$V$1,123:$V$1}),{14:$Vt1,17:72,18:117,38:181,40:$V5,46:$V7,48:180,52:262,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($V02,$VL1,{121:129,10:$VT,12:$VU,19:$VV,20:$VW,98:$VY,124:$V11,129:$V21,130:$V31,131:$V41}),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:261,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:[1,264],115:66,120:263},o($VY1,$VW1),{14:[1,266],17:72,18:117,40:$VP,46:$V7,48:265,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:267,114:$VQ,115:174},{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:268,114:$VQ,115:174},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:269,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:270,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{58:271,60:[1,272],62:$V12},{58:274,62:$V12},o($Vk1,[2,99]),o($Vk1,[2,101],{78:[1,275]}),{78:[1,276]},o($Vk1,[2,103]),o($Vk1,[2,105]),o($Vk1,[2,106]),o($Vk1,[2,107]),o($Vk1,[2,108]),o($Vk1,[2,109]),{14:$VZ1,17:72,18:117,40:$V5,46:$V7,48:261,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,119:$V_1,120:258,126:277,127:70},o([10,12,24,41,113,114,116,117,122,123,124,129,130,131],$VA1,{46:[1,278]}),o($Vr1,$V22),o($Vr1,[2,195]),{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:279,114:$VQ,115:280},{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:281,114:$VQ,115:174},{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:282,114:$VQ,115:174},{14:$VR,38:283,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},{41:[1,284],122:$VJ,123:$VK},o($V32,$Vh1,{121:155,10:$VT,12:$VU,41:$V42,113:$Vi1,114:$Vj1,124:$Vg1,129:$V21,130:$V31,131:$V41}),{41:[1,287],46:[1,286]},o([41,46,113,114,116,117,122,123],$VS,{121:129,10:$VT,12:$VU,19:$VV,20:$VW,98:$VY,124:$V11,129:$V21,130:$V31,131:$V41}),{14:[1,288]},{14:[1,289]},{14:[1,290]},o($Vr1,[2,193]),o($Vr1,[2,194]),{12:[1,291]},{12:[1,292]},{15:[1,293]},o($VG,[2,9]),o($V52,[2,92]),o($V52,[2,94]),o($Va1,[2,202],{122:$VJ,123:$VK}),o($Va1,[2,203],{122:$VJ,123:$VK}),{41:[1,294],122:$VJ,123:$VK},{41:[1,295],122:$VJ,123:$VK},{14:$V1,17:72,18:43,22:296,36:199,38:200,40:$V5,46:$V7,48:47,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$VD1,90:$VE1,91:$Vw1,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{24:[1,297]},{14:$VK1,46:$VL,71:$VM,92:105,93:$VN},{14:[1,298]},{14:[1,299]},{40:[1,300]},{40:[1,301]},o($V32,$Vh1,{121:155,10:$VT,12:$VU,41:[1,302],113:$Vi1,114:$Vj1,124:$Vg1,129:$V21,130:$V31,131:$V41}),o([10,12,46,113,114,116,117,122,123,124,129,130,131],$Vx1,{41:[1,303]}),{41:[1,304],122:$VJ,123:$VK},o($VI,[2,46]),{14:$VR,38:308,41:[1,305],42:306,44:307,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},{14:$VR,38:308,41:[1,310],42:309,44:307,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:311,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:[1,313],76:[1,312]},{14:[1,314]},{24:[2,115],45:$VJ1},o($VF1,$VG1,{94:$VH1,98:$VI1}),{14:[1,315]},{93:[1,316]},{14:$VR,38:308,41:[1,318],42:317,44:307,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},{14:$VR,38:308,41:[1,320],42:319,44:307,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},o($VI,[2,44]),{41:$V42,113:$Vi1,114:$Vj1},o([41,46,113,114,116,117],$VS,{19:$VV,20:$VW,98:$VY}),{14:$VR,38:323,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,132:321,133:322},{94:[1,324]},{14:$VR,38:323,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,132:325,133:322},{24:[2,118],94:[1,326]},{14:$V62,134:327,136:328},{24:[2,120]},{24:[2,121]},{24:[2,122]},{24:[2,123]},{14:$VN1,49:$VP1},{14:$VQ1,49:$VS1},o($Va1,[2,149],{113:$Vi1,114:$Vj1}),o($Va1,[2,150]),o($V72,$Vx1,{24:$V82,41:$V82}),{14:[1,330]},o($V72,$Vy1,{24:$V92,41:$V92}),{14:$VO,17:335,18:117,40:$VP,46:$V7,48:333,58:334,59:$Vd,62:$Va2,67:73,71:$Vi,76:$Vm,77:$Vn,95:331,96:332,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{40:[1,337]},o($Ve1,[2,205],{113:$Vi1,114:$Vj1}),{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:[1,338],77:$Vn,104:115,106:$VD,107:173,114:$VQ,115:174},{76:[1,339]},o($Ve1,[2,216]),{41:[1,340],45:$Vb2},{24:[2,53]},o($Vc2,[2,61],{113:$Vi1,114:$Vj1}),{99:[1,342],113:$Vi1,114:$Vj1},o($Va1,[2,171],{113:$Vi1,114:$Vj1}),o($Va1,[2,172],{113:$Vi1,114:$Vj1}),o($Vd2,[2,11]),o($Vd2,[2,12]),o($Va1,[2,154],{113:$Vi1,114:$Vj1}),o($Va1,[2,173],{113:$Vi1,114:$Vj1}),o($Va1,[2,174],{113:$Vi1,114:$Vj1}),o($Va1,[2,158],{113:$Vi1,114:$Vj1}),o($Vl1,[2,210],{122:$Vm1}),o($Ve1,$Vf1,{121:343,10:$VT,12:$VU,124:$Vg1,129:$V21,130:$V31,131:$V41}),o([10,12,24,41,46,113,114,116,117,122,123,129,130,131],$VL1,{19:$VV,20:$VW,98:$VY,124:[1,344]}),{14:$VO,17:72,18:117,40:[1,346],46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:345,114:$VQ,115:174},o($Ve2,$Vh1,{113:$Vi1,114:$Vj1}),{41:[1,347],122:$VJ,123:$VK},o($Ve1,[2,200]),{14:$Vf2,17:72,18:117,40:$VP,46:$V7,48:261,59:$Vd,62:$Vf,67:73,71:$Vi,76:[1,348],77:$Vn,104:115,106:$VD,107:351,112:65,114:$VE,115:66,120:349},o($Ve1,[2,204],{113:$Vi1,114:$Vj1}),o($V72,$VL1,{19:$VV,20:$VW,24:$Vg2,41:$Vg2,122:$Vg2,123:$Vg2,98:$VY}),o($Vn1,[2,176],{46:$Vo1,116:$Vp1,117:$Vq1}),o($Vn1,[2,177],{46:$Vo1,116:$Vp1,117:$Vq1}),{41:[1,352],113:$Vi1,114:$Vj1},{41:[1,353],113:$Vi1,114:$Vj1},{45:[1,354]},{45:[1,355]},o($Vc2,$Vh2),{41:[1,356],45:[1,357]},o($Vk1,[2,100]),o($Vk1,[2,102]),o($Ve1,[2,212]),{14:[1,358]},o($Vr1,[2,182]),o($Vr1,[2,183]),o($Vr1,[2,184]),o($Vr1,[2,185]),{41:[1,359],46:[1,360]},o($Ve1,[2,215]),o($Vr1,[2,188]),{41:[1,361]},{14:$VO,17:72,18:117,40:$VP,46:$V7,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:362,114:$VQ,115:174},o($VU1,$VN1),o($VU1,$VQ1),o([14,41,46,71,93],$VT1),o($VG,[2,6]),o($VG,[2,7]),{14:[1,363]},{14:$V1,17:72,18:43,21:364,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:365,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$V1,17:72,18:43,21:367,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:366,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:[1,369],18:371,51:368,104:370,105:42},o([14,40,46,55,56,57,59,61,62,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,114,119],[2,48]),o($Vi2,$VN1,{14:$VO1}),o($Vi2,$VQ1,{14:$VR1}),{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:47,52:372,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$Vd1,17:72,18:117,40:$V5,46:$V7,48:47,52:373,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{49:[1,374]},{49:[1,375]},{49:[1,376]},{29:377,49:$V9},{41:[1,378],45:$Vj2},o($Vc2,[2,40]),{14:[1,380],46:[1,381]},{41:[1,382],45:$Vj2},{24:[1,383]},o($VF1,[2,128],{113:$Vi1,114:$Vj1}),{99:[1,384]},{99:[1,385]},o($VF1,[2,135],{94:[1,386],98:[1,387]}),{93:[1,388]},{24:[2,116],45:$Vk2},{41:[1,389],45:$Vj2},{24:[1,390]},{41:[1,391],45:$Vj2},{29:392,49:$V9},{14:$VR,38:323,50:[1,393],78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,133:394},o($Vl2,[2,234]),{14:[1,395]},{49:[1,396]},{14:$VR,38:323,50:[1,397],78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,133:394},{49:[1,398]},{45:[1,400],50:[1,399]},o($Vm2,[2,244]),o($Vm2,[2,246],{94:[1,401]}),{93:[1,402]},{45:$Vn2,50:[1,403]},{50:[1,405]},o($Vm2,[2,159],{113:$Vi1,114:$Vj1}),o($Vm2,[2,160]),o($Vo2,$Vp2),o($Vo2,$Vh2),{14:[1,407],17:72,18:117,40:$VP,46:$V7,48:406,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Vq2,$VA1,{46:[1,408]}),o($Ve1,$Vr2,{46:[1,409]}),{24:[2,52]},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:410,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Vs2,[2,167],{98:[1,411]}),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:261,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:[1,413],115:66,120:412},{114:[1,414],128:$VX1},o($Ve1,$V$1),{14:$Vt1,17:72,18:117,38:181,40:$V5,46:$V7,48:180,52:415,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1,104:115,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},o($Ve1,$Vt2),o($Vq2,$VA1,{46:[1,416]}),o($Ve1,[2,223]),o($V72,$VL1,{19:$VV,20:$VW,24:$Vu2,41:$Vu2,122:$Vu2,123:$Vu2,98:$VY}),o($V02,$V22),{24:[2,54]},{24:[2,55]},{59:[1,417]},{59:[1,418]},{24:[2,58]},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:247,54:419,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Ve2,[2,221]),o($Vr1,[2,179]),{41:[1,420]},{55:$VV1,103:421},o($Vr1,[2,166]),{12:[1,422]},o($VH,[2,63],{64:[1,423]}),o($VH,[2,64],{64:[1,424]}),o($VI,[2,84]),o($VI,[2,85]),{41:[1,425]},{19:$VV,20:$VW,94:$VX,98:$VY,108:$VZ,109:$V_,110:$V$,111:$V01},{94:$V71,110:$V81,111:$V91},{94:$Vc1},{41:[1,426],122:$VJ,123:$VK},{41:[1,427],122:$VJ,123:$VK},{66:428,68:429,69:$Vv2,72:$Vw2},{66:432,68:429,69:$Vv2,72:$Vw2},{66:433,68:429,69:$Vv2,72:$Vw2},o($VI,[2,30]),{29:434,49:$V9},{14:$VR,38:308,44:435,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},o($Vc2,[2,42]),{14:[1,436]},{24:[1,438],29:437,49:$V9},o($VI,[2,37]),o($VF1,[2,129],{94:[1,440],98:[1,439]}),o($VF1,[2,132],{94:[1,441]}),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:442,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:[1,444],76:[1,443]},o($VF1,$Vk2),{24:[1,446],29:445,49:$V9},o($VI,[2,39]),{29:447,49:$V9},o($VI,[2,35]),{14:[1,449],24:[1,448]},o($Vl2,[2,235]),{24:[1,450],98:[1,451]},{14:$VO,17:72,18:117,40:$VP,46:$V7,48:333,58:334,59:$Vd,62:$Va2,67:73,71:$Vi,76:$Vm,77:$Vn,95:452,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},{14:[1,454],24:[1,453]},{14:$VB1,17:456,62:$Vf,71:$VC1,76:$Vm,77:$Vn,96:455},{14:[1,458],24:[1,457]},{14:$V62,136:459},{76:[1,460]},o($Va1,[2,152]),o($Va1,[2,156]),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:461,58:462,59:$Vd,62:$Va2,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Va1,[2,157]),{41:[1,463],113:$Vi1,114:$Vj1},o([41,113,114,116,117],$VL1,{19:$VV,20:$VW,46:[1,464],98:$VY}),{14:[1,465]},{14:[1,466]},o($Vc2,[2,62],{113:$Vi1,114:$Vj1}),{14:$VO,17:72,18:117,40:$VP,46:$V7,48:467,59:$Vd,62:$Vf,67:73,71:$Vi,76:$Vm,77:$Vn,104:115,106:$VD,107:68,112:65,114:$VQ,115:66},o($Ve1,[2,222]),{14:$Vf2,17:72,18:117,40:$VP,46:$V7,48:261,59:$Vd,62:$Vf,67:73,71:$Vi,76:[1,468],77:$Vn,104:115,106:$VD,107:351,112:65,114:$VE,115:66,120:349},{76:[1,469]},{41:[1,470],122:$VJ,123:$VK},{14:[1,471]},{14:[1,472]},{14:[1,473]},{41:[1,474],45:$Vb2},o($Vr1,[2,180]),o($Vr1,[2,196]),o($VG,[2,8]),{14:$V1,17:72,18:43,21:475,22:9,23:$V3,25:$V4,26:477,27:13,28:14,29:476,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$V1,17:72,18:43,21:478,22:9,23:$V3,25:$V4,26:480,27:13,28:14,29:479,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{14:$V1,17:72,18:43,21:481,22:9,23:$V3,25:$V4,26:12,27:13,28:14,29:482,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,38:33,40:$V5,43:$V6,46:$V7,47:$V8,48:47,49:$V9,51:24,52:25,53:26,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,67:73,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,104:41,105:42,106:$VD,107:68,112:65,114:$VE,115:66,118:44,119:$VF,120:46,125:63,126:67,127:70},{24:[1,483]},{24:[1,484]},{50:[1,485],68:486,69:$Vv2,72:$Vw2},o($Vx2,[2,74]),{14:[1,489],17:487,62:$Vf,71:[1,488],76:$Vm,77:$Vn},{70:[1,490]},{50:[1,491],68:486,69:$Vv2,72:$Vw2},{50:[1,492],68:486,69:$Vv2,72:$Vw2},o($VI,[2,33]),o($Vc2,[2,41]),o($Vc2,[2,43]),o($VI,[2,31]),o($VI,[2,36]),{76:[1,493]},{49:[1,494]},{49:[1,495]},o($VF1,[2,136],{113:$Vi1,114:$Vj1}),{99:[1,496]},{99:[1,497]},o($VI,[2,32]),o($VI,[2,38]),o($VI,[2,34]),o($VI,[2,232]),{24:[1,498]},o($Vl2,[2,236]),{76:[1,499]},{45:$Vn2,50:[1,500]},o($VI,[2,238]),{24:[1,501]},{50:[1,502]},{50:$Vp2},o($VI,[2,240]),{24:[1,503]},o($Vm2,[2,245]),o($Vm2,[2,247]),o($Vm2,[2,161],{113:$Vi1,114:$Vj1}),o($Vm2,[2,162]),o($Vr1,[2,163]),{106:[1,504]},o($Ve1,[2,207]),o($Ve1,[2,208]),{99:[1,505],113:$Vi1,114:$Vj1},o($Vq2,$VA1,{46:[1,506]}),o($Ve1,$Vr2),o($Ve1,$Vt2),o($Ve1,[2,201]),{41:[1,507]},{41:[1,508]},{24:[2,59]},o($VI,[2,67]),o($VI,[2,68]),o($VI,[2,70]),o($VI,[2,65]),o($VI,[2,66]),o($VI,[2,69]),o($VI,[2,86]),o($VI,[2,87]),o($VI,[2,88]),o($VI,[2,89]),o($VI,[2,71]),o($Vx2,[2,75]),{70:[1,509]},{70:[1,510]},{70:[1,511]},o($Vx2,[2,82],{21:6,22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,7:512,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($VI,[2,72]),o($VI,[2,73]),{99:[1,513]},{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:514},{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:517},o($VF1,[2,137],{94:[1,518]}),o($VF1,[2,138],{94:[1,519]}),o($VI,[2,233]),{99:[1,520]},{24:[2,117]},o($VI,[2,239]),{24:[1,521]},o($VI,[2,241]),{40:[1,522]},o($Vs2,[2,168]),{14:[1,523]},{24:[2,56]},{24:[2,57]},o($Vx2,[2,76],{21:6,22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,7:524,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($Vx2,[2,77],{21:6,22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,7:525,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($Vx2,[2,79],{21:6,22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,7:526,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($Vx2,[2,83],{22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,21:83,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($VF1,[2,130],{94:[1,527]}),{45:$Vz2,50:[1,528]},o($Vm2,[2,141]),{14:$VB1,17:515,49:$VA2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,100:531,101:532,102:530},{45:$Vz2,50:[1,534]},{49:[1,535]},{49:[1,536]},{24:[1,537]},{24:[2,119]},{14:$VR,38:538,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vu1,90:$Vv1,91:$Vw1},o($Ve1,[2,224]),o($Vx2,[2,80],{22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,21:83,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($Vx2,[2,78],{22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,21:83,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),o($Vx2,[2,81],{22:9,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,51:24,52:25,53:26,38:33,104:41,105:42,18:43,118:44,120:46,48:47,125:63,112:65,115:66,126:67,107:68,127:70,17:72,67:73,21:83,14:$V1,23:$V3,25:$V4,40:$V5,43:$V6,46:$V7,47:$V8,49:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,61:$Ve,62:$Vf,63:$Vg,65:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VC,106:$VD,114:$VE,119:$VF}),{49:[1,539]},o($VF1,[2,133]),{14:$VB1,17:540,62:$Vf,71:$VC1,76:$Vm,77:$Vn},{45:$VB2,50:[1,541]},{45:$VC2,50:[1,543]},{45:$Vz2,50:[2,145]},{14:$VB1,17:515,49:$VA2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,100:531,101:532,102:545},o($VF1,[2,134]),{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:546},{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:547},o($Vl2,[2,237]),{41:[1,548],46:[1,549]},{49:[1,551],100:550},o($Vm2,[2,144]),o($Vm2,[2,142]),{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:552},o($Vm2,[2,143]),{49:[1,553]},{45:$VB2,50:[1,554]},{45:$Vz2,50:[1,555]},{45:$Vz2,50:[1,556]},{41:[1,557]},{41:[1,558]},{45:$VC2,50:[1,559]},{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:532,102:560},{45:$Vz2,50:[2,146]},{14:$VB1,17:515,49:$Vy2,62:$Vf,71:$VC1,76:$Vm,77:$Vn,101:532,102:561},o($Vm2,$VD2),o($VF1,[2,139]),o($VF1,[2,140]),o($Vr1,[2,164]),{41:[1,562]},o($VF1,[2,131]),{45:$VB2,50:[1,563]},{45:$VB2,50:[1,564]},o($Vr1,[2,165]),o($Vm2,$VD2),o($Vm2,[2,148])],
defaultActions: {80:[2,1],228:[2,120],229:[2,121],230:[2,122],231:[2,123],246:[2,53],340:[2,52],352:[2,54],353:[2,55],356:[2,58],456:[2,124],474:[2,59],500:[2,117],507:[2,56],508:[2,57],521:[2,119]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var escopoAtual = 0;
  var tabelaSimbolos = [];
  var tabelaDefinicoes = {}; // Tabela para armazenar definições do pré-processador
  var temp = [];
  var tac = [];
  var erros = [];
  var arvores = [];
  var comment_flag = false;

  class AST {
      constructor(root) {
          this.root = root;
      }

      postorder(node) {
          if (node !== null) {
              this.postorder(node.leftChild);
              this.postorder(node.rightChild);
              console.log(node.type);
          }
      }

      inorder(node) {
          if (node !== null) {
              this.inorder(node.leftChild);
              tac.push(node.type);
              this.inorder(node.rightChild);
          }
      }
  }

  class Node {
      constructor(type, leftChild = null, rightChild = null) {
          this.type = type;
          this.leftChild = leftChild;
          this.rightChild = rightChild;
      }
  }

  function printPosOrder(node, deep = 0) {
      let indent = "    ".repeat(deep);  // Ajusta a indentação para cada nível
      let treeLine = indent + "|";
      
      if (node !== null && node !== undefined) {
          // Exibe o tipo do nó atual
          console.log(treeLine + "- " + (node.type || "undefined"));
          
          // Se houver filhos, imprimimos as relações
          if (node.leftChild !== null && node.leftChild !== undefined || 
              node.rightChild !== null && node.rightChild !== undefined) {
              
              if (node.leftChild !== null && node.leftChild !== undefined) {
                  console.log(treeLine + "   /         \\");
                  printPosOrder(node.leftChild, deep + 1); // Desenha o filho à esquerda
              }

              if (node.rightChild !== null && node.rightChild !== undefined) {
                  console.log(treeLine + "   \\         /");
                  printPosOrder(node.rightChild, deep + 1); // Desenha o filho à direita
              }
          }
      } else {
          console.log(treeLine + "- " + "undefined");
      }
  }

  function criarVariavel(tipo, nome, valor) {
      if (typeof valor === 'string') {
          const variavelExistente = tabelaSimbolos.find(dictAtual => dictAtual.id === valor);
          if (variavelExistente) {
              tabelaSimbolos.push({ tipo, id: nome, val: variavelExistente.val, escopo: escopoAtual });
          }
      } else {
          tabelaSimbolos.push({ tipo, id: nome, val: valor, escopo: escopoAtual });
      }
  }

  function verificaVariavel(id) {
    if (typeof id === 'string' && /^'.+'$/.test(id)) return;
    if (tabelaDefinicoes.hasOwnProperty(id)) return;

    // Procurar variáveis do escopo atual para cima
    let encontrado = false;
    let escopoBusca = escopoAtual;
    while (escopoBusca >= 0) {
        const variavel = tabelaSimbolos.find(v => v.id === id && v.escopo === escopoBusca);
        if (variavel) {
            encontrado = true;
            break;
        }
        escopoBusca--; // Vai subindo na hierarquia
    }

    if (!encontrado) {
        erros.push("Variável '" + id + "' não declarada no escopo atual");
    }
}


  function verificaTipos(varOne, varTwo) {
      if (typeof varOne === typeof varTwo) {
          return true;
      } else {
          erros.push(`${varOne} é de tipo diferente de ${varTwo}`);
      }
  }

  function criaTAC(temp, var1, var2, op) {
      const code = `${temp} = ${var1} ${op} ${var2}`;
      tac.push(code);
  }

  function criaTACIf(condicional, l) {
      tac.push(`if ${condicional} goto ${l}`);
  }

  function criaTACUnaryOp(op, var1, temp) {
      const code = `${temp} = ${op}${var1}`;
      tac.push(code);
  }

  function printaTAC() {
      tac.forEach((line, index) => {
          console.log(`${index}: ${line}`);
      });
  }

  function criaTemp() {
      return `temp${Math.floor(Math.random() * 1000)}`;
  }

  function criaNode(type, left, right) {
      return new Node(type, left, right);
  }
  
  function definirConstante(nome, valor) {
    if (valor !== null && valor !== undefined) {
        tabelaDefinicoes[nome] = valor;
    } else {
        tabelaDefinicoes[nome] = 0; // fallback para casos como '#define FLAG'
    }
}
  
  function obterValorDefinicao(nome) {
      return tabelaDefinicoes[nome];
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Ignora completamente comentários de linha */ return; 
break;
case 1: /* Ignora completamente comentários de bloco */ return; 
break;
case 2: /* Alternativa robusta para comentários de bloco */ return; 
break;
case 3:/* Ignorar espaços em branco */
break;
case 4:console.log('Token INCLUDE'); return 9;
break;
case 5:console.log('Token DEFINE'); return 16;
break;
case 6:console.log('Token STDIO_H'); return 11;
break;
case 7:console.log('Token STDLIB_H'); return 13;
break;
case 8:console.log('Token STDLIB_H'); return 13;
break;
case 9:console.log('Token MALLOC'); return 55;
break;
case 10:console.log('Token FREE'); return 56;
break;
case 11:console.log('Token SIZEOF'); return 106;
break;
case 12:console.log('Token VOID'); return 43;
break;
case 13:console.log('Token RETURN'); return 47;
break;
case 14:console.log('Token PRINTF'); return 61;
break;
case 15:console.log('Token SCANF'); return 57;
break;
case 16:console.log('Token MAIN'); return 39;
break;
case 17:console.log('Token INT'); return 78;
break;
case 18:console.log('Token DOUBLE'); return 79;
break;
case 19:console.log('Token FLOAT'); return 80;
break;
case 20:console.log('Token CHAR'); return 81;
break;
case 21:console.log('Token STRUCT'); return 89;
break;
case 22:console.log('Token UNION'); return 90;
break;
case 23:console.log('Token ENUM'); return 91;
break;
case 24:console.log('Token TYPEDEF'); return 97;
break;
case 25:console.log('Token UNSIGNED'); return 82;
break;
case 26:console.log('Token SIGNED'); return 85;
break;
case 27:console.log('Token CONST'); return 86;
break;
case 28:console.log('Token VOLATILE'); return 87;
break;
case 29:console.log('Token REGISTER'); return 88;
break;
case 30:console.log('Token LONG'); return 83;
break;
case 31:console.log('Token SHORT'); return 84;
break;
case 32:console.log('Token ADD_ASSIGN'); return 110;
break;
case 33:console.log('Token SUB_ASSIGN'); return 111;
break;
case 34:console.log('Token INC'); return 108;
break;
case 35:console.log('Token DEC'); return 109;
break;
case 36:console.log('Token MUL'); return 46;
break;
case 37:console.log('Token MUL_ASSIGN'); return 'MUL_ASSIGN';
break;
case 38:console.log('Token DIV'); return 116;
break;
case 39:console.log('Token DIV_ASSIGN'); return 'DIV_ASSIGN';
break;
case 40:console.log('Token MOD'); return 117;
break;
case 41:console.log('Token MOD_ASSIGN'); return 'MOD_ASSIGN';
break;
case 42:console.log('Token SUM'); return 113;
break;
case 43:console.log('Token SUB'); return 114;
break;
case 44:console.log('Token COMMA'); return 45;
break;
case 45:console.log('Token SEMICOLON'); return 24;
break;
case 46:console.log('Token COLON'); return 70;
break;
case 47:console.log('Token DOT'); return 19;
break;
case 48:console.log('Token LPAREN'); return 40;
break;
case 49:console.log('Token RPAREN'); return 41;
break;
case 50:console.log('Token LBRACE'); return 49;
break;
case 51:console.log('Token RBRACE'); return 50;
break;
case 52:console.log('Token LBRACKET'); return 98;
break;
case 53:console.log('Token RBRACKET'); return 99;
break;
case 54:console.log('Token LE'); return 129;
break;
case 55:console.log('Token GE'); return 130;
break;
case 56:console.log('Token LT'); return 10;
break;
case 57:console.log('Token GT'); return 12;
break;
case 58:console.log('Token NE'); return 131;
break;
case 59:console.log('Token EQ'); return 124;
break;
case 60:console.log('Token ASSIGN'); return 94;
break;
case 61:console.log('Token AND'); return 122;
break;
case 62:console.log('Token OR'); return 123;
break;
case 63:console.log('Token NOT'); return 119;
break;
case 64:console.log('Token BITAND'); return 59;
break;
case 65:console.log('Token IF'); return 63;
break;
case 66:console.log('Token SWITCH'); return 65;
break;
case 67:console.log('Token CASE'); return 69;
break;
case 68:console.log('Token BREAK'); return 23;
break;
case 69:console.log('Token CONTINUE'); return 25;
break;
case 70:console.log('Token DEFAULT'); return 72;
break;
case 71:console.log('Token ELSE'); return 64;
break;
case 72:console.log('Token WHILE'); return 73;
break;
case 73:console.log('Token FOR'); return 74;
break;
case 74:console.log('Token DO'); return 75;
break;
case 75:console.log('Token NULL'); return 128;
break;
case 76:console.log('Token FORMAT_D'); return 60;
break;
case 77:console.log('Token STRING_LIT:', yy_.yytext); return 62;
break;
case 78:console.log('Token CHAR_LIT'); return 71;
break;
case 79:console.log('Token IDF'); return 14;
break;
case 80:console.log('Token F_LIT'); return 77;
break;
case 81:console.log('Token INT_LIT'); return 76;
break;
case 82:console.log('Token CHAR_LIT'); return 71;
break;
case 83:console.log('Token HASH'); return '#';
break;
case 84:console.log('Erro léxico: caractere [', yy_.yytext, '] não reconhecido.');
break;
case 85:console.log('Token EOF'); return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\\\*([^*]|\\\*+[^*/])*\\\*+\/)/,/^(?:\/\*(.|\n)*?\*\/)/,/^(?:\s+)/,/^(?:#include\b)/,/^(?:#define\b)/,/^(?:stdio\.h\b)/,/^(?:stdlib\.h\b)/,/^(?:string\.h\b)/,/^(?:malloc\b)/,/^(?:free\b)/,/^(?:sizeof\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:printf\b)/,/^(?:scanf\b)/,/^(?:main\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:struct\b)/,/^(?:union\b)/,/^(?:enum\b)/,/^(?:typedef\b)/,/^(?:unsigned\b)/,/^(?:signed\b)/,/^(?:const\b)/,/^(?:volatile\b)/,/^(?:register\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\*=)/,/^(?:\/)/,/^(?:\/=)/,/^(?:%)/,/^(?:%=)/,/^(?:\+)/,/^(?:-)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:NULL\b)/,/^(?:%d\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'([^\\\']|\\.)')/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[0-9]*\.[0-9]+([eE][+-][0-9]+)?)/,/^(?:[0-9]+)/,/^(?:'\[a-zA-Z0-9\]')/,/^(?:#)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
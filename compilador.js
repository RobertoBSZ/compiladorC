/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,38],$V2=[1,8],$V3=[1,10],$V4=[1,11],$V5=[1,62],$V6=[1,33],$V7=[1,71],$V8=[1,34],$V9=[1,31],$Va=[1,43],$Vb=[1,44],$Vc=[1,45],$Vd=[1,72],$Ve=[1,46],$Vf=[1,26],$Vg=[1,30],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[1,73],$Vl=[1,74],$Vm=[1,75],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,35],$Vz=[1,36],$VA=[1,37],$VB=[1,67],$VC=[1,69],$VD=[1,42],$VE=[9,14,16,20,22,35,38,41,42,44,51,52,53,55,57,59,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,97,105,110],$VF=[5,14,20,22,35,38,41,42,44,45,51,52,53,55,57,59,61,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,97,105,110],$VG=[5,14,20,22,35,38,41,42,44,45,51,52,53,55,57,59,60,61,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,97,105,110],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,106],$VL=[1,107],$VM=[2,146],$VN=[1,112],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[2,149],$VV=[1,120],$VW=[1,121],$VX=[1,122],$VY=[21,36],$VZ=[1,127],$V_=[14,34,36,41,73,89],$V$=[21,36,112],$V01=[1,139],$V11=[21,36,112,114],$V21=[1,150],$V31=[1,151],$V41=[1,152],$V51=[2,169],$V61=[1,153],$V71=[1,154],$V81=[10,12,21,36,40,92,104,105,112,114,117,120,121,122],$V91=[1,155],$Va1=[1,156],$Vb1=[1,157],$Vc1=[10,12,21,36,40,41,92,104,105,107,108,112,114,117,120,121,122],$Vd1=[2,141],$Ve1=[2,151],$Vf1=[9,10,12,14,16,20,21,22,35,36,38,40,41,42,44,45,51,52,53,55,57,59,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,97,104,105,107,108,110,112,114,117,120,121,122],$Vg1=[2,82],$Vh1=[2,84],$Vi1=[21,40],$Vj1=[2,101],$Vk1=[1,179],$Vl1=[1,180],$Vm1=[1,181],$Vn1=[1,183],$Vo1=[14,34,41,73,89],$Vp1=[2,96],$Vq1=[2,97],$Vr1=[2,98],$Vs1=[1,197],$Vt1=[1,210],$Vu1=[2,167],$Vv1=[1,216],$Vw1=[14,35,41,55,71,72,73,97,105],$Vx1=[10,12,112,114,117,120,121,122],$Vy1=[1,222],$Vz1=[1,267],$VA1=[41,104,105,107,108],$VB1=[2,119],$VC1=[2,121],$VD1=[1,271],$VE1=[36,40],$VF1=[14,36,41,73,89],$VG1=[1,304],$VH1=[45,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VI1=[40,45],$VJ1=[2,168],$VK1=[2,171],$VL1=[2,172],$VM1=[1,342],$VN1=[1,343],$VO1=[45,65,67],$VP1=[1,413];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"corpo":3,"program":4,"EOF":5,"preproc_directives":6,"statements_list":7,"preproc_directive":8,"INCLUDE":9,"LT":10,"STDIO_H":11,"GT":12,"STDLIB_H":13,"IDF":14,"DOT":15,"DEFINE":16,"valor_lit":17,"statement":18,"exp_stmt":19,"BREAK":20,";":21,"CONTINUE":22,"if_stmt":23,"loop_stmt":24,"switch_stmt":25,"statement_composto":26,"function_definition":27,"function_prototype":28,"return_stmt":29,"struct_decl":30,"union_decl":31,"enum_decl":32,"tipo_var":33,"MAIN":34,"(":35,")":36,"parameter_list":37,"VOID":38,"parameter":39,",":40,"MUL":41,"RETURN":42,"expressao_aritmetica":43,"{":44,"}":45,"declaracao_variavel":46,"expressao_atribuicao":47,"expressao_condicional":48,"function_call":49,"argument_list":50,"MALLOC":51,"FREE":52,"SCANF":53,"string_lit":54,"BITAND":55,"FORMAT_D":56,"PRINTF":57,"STRING_LIT":58,"IF":59,"ELSE":60,"SWITCH":61,"case_list":62,"cast_exp":63,"case_item":64,"CASE":65,":":66,"DEFAULT":67,"WHILE":68,"FOR":69,"DO":70,"INT_LIT":71,"F_LIT":72,"CHAR_LIT":73,"INT":74,"DOUBLE":75,"FLOAT":76,"CHAR":77,"UNSIGNED":78,"SIGNED":79,"LONG":80,"SHORT":81,"CONST":82,"VOLATILE":83,"REGISTER":84,"STRUCT":85,"UNION":86,"ENUM":87,"lista_ids":88,"QUOTE":89,"=":90,"[":91,"]":92,"array_init":93,"malloc_exp":94,"acesso_array":95,"expressao_in_decrement":96,"SIZEOF":97,"fator":98,"INC":99,"DEC":100,"ADD_ASSIGN":101,"SUB_ASSIGN":102,"termo":103,"SUM":104,"SUB":105,"sizeof_exp":106,"DIV":107,"MOD":108,"expressao_or":109,"NOT":110,"expressao_and":111,"OR":112,"expressao_relacional_ou_termo":113,"AND":114,"expressao_primaria":115,"expressao_relacional":116,"EQ":117,"NULL":118,"operador_relacional":119,"LE":120,"GE":121,"NE":122,"struct_member_list":123,"struct_member":124,"enum_member_list":125,"enum_member":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"INCLUDE",10:"LT",11:"STDIO_H",12:"GT",13:"STDLIB_H",14:"IDF",15:"DOT",16:"DEFINE",20:"BREAK",21:";",22:"CONTINUE",34:"MAIN",35:"(",36:")",38:"VOID",40:",",41:"MUL",42:"RETURN",44:"{",45:"}",51:"MALLOC",52:"FREE",53:"SCANF",55:"BITAND",56:"FORMAT_D",57:"PRINTF",58:"STRING_LIT",59:"IF",60:"ELSE",61:"SWITCH",65:"CASE",66:":",67:"DEFAULT",68:"WHILE",69:"FOR",70:"DO",71:"INT_LIT",72:"F_LIT",73:"CHAR_LIT",74:"INT",75:"DOUBLE",76:"FLOAT",77:"CHAR",78:"UNSIGNED",79:"SIGNED",80:"LONG",81:"SHORT",82:"CONST",83:"VOLATILE",84:"REGISTER",85:"STRUCT",86:"UNION",87:"ENUM",89:"QUOTE",90:"=",91:"[",92:"]",97:"SIZEOF",99:"INC",100:"DEC",101:"ADD_ASSIGN",102:"SUB_ASSIGN",104:"SUM",105:"SUB",107:"DIV",108:"MOD",110:"NOT",112:"OR",114:"AND",117:"EQ",118:"NULL",120:"LE",121:"GE",122:"NE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[8,4],[8,4],[8,6],[8,3],[8,2],[7,1],[7,2],[18,1],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[27,5],[27,6],[27,6],[27,6],[27,6],[27,5],[28,6],[28,5],[28,6],[28,5],[37,1],[37,3],[39,2],[39,3],[29,3],[29,2],[26,3],[26,2],[19,2],[19,2],[19,2],[19,2],[49,4],[49,3],[49,4],[49,4],[49,7],[49,7],[49,4],[49,6],[54,1],[50,1],[50,3],[23,5],[23,5],[23,7],[23,7],[23,7],[23,7],[23,7],[23,7],[25,7],[25,7],[25,7],[62,1],[62,2],[64,3],[64,4],[64,2],[64,3],[24,5],[24,5],[24,7],[24,7],[24,7],[24,7],[17,1],[17,1],[17,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,2],[33,2],[33,2],[33,2],[33,2],[33,2],[33,2],[33,2],[33,2],[46,2],[46,3],[88,1],[88,1],[88,3],[88,3],[88,4],[88,4],[88,8],[88,8],[88,3],[88,5],[88,6],[88,6],[88,10],[88,10],[93,1],[93,3],[47,3],[47,3],[47,3],[47,5],[47,3],[47,3],[47,1],[94,4],[94,9],[94,10],[63,4],[95,4],[96,2],[96,2],[96,3],[96,3],[96,3],[96,3],[43,1],[43,3],[43,3],[43,1],[106,4],[106,5],[103,1],[103,3],[103,3],[103,3],[103,3],[98,1],[98,1],[98,3],[98,1],[98,2],[98,1],[98,2],[98,2],[98,1],[98,5],[48,1],[48,2],[109,1],[109,3],[111,1],[111,3],[113,1],[113,1],[113,3],[113,3],[113,4],[113,2],[113,4],[115,1],[116,3],[116,4],[116,4],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[30,6],[30,7],[123,1],[123,2],[124,3],[124,6],[31,6],[31,7],[32,6],[32,7],[125,1],[125,3],[126,1],[126,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Análise Sintática concluída com sucesso!\n");

        // Exibindo a Tabela de Símbolos
        console.log('Tabela de símbolos:\n', tabelaSimbolos);
        
        // Verificação de erros semânticos
        console.log('Análise Semântica\n');
        if (erros.length > 0) {
            console.log('Erros semânticos encontrados:\n', erros);
        } else {
            console.log('Sem erros semânticos encontrados.\n');
            
            // Se não houver erros, gera o código TAC
            console.log('Códigos Three Address Code (TAC) gerados:\n');
            printaTAC();
            console.log('');
        }

        // Gerando ASTs
        console.log('ASTs geradas: \n');
        arvores.forEach(arvore => {
            printPosOrder(arvore.root, 1);
        });
    
break;
case 2: case 3: case 11:

        arvores.push(new AST($$[$0].node));
    
break;
case 4: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 36: case 70: case 181: case 189:
 this.$ = { node: $$[$0].node }; 
break;
case 5:
 this.$ = { node: new Node('PREPROC_DIRECTIVES', $$[$0-1].node, $$[$0].node) }; 
break;
case 6:
 this.$ = { node: new Node('INCLUDE', new Node('STDIO_H')) }; 
break;
case 7:
 this.$ = { node: new Node('INCLUDE', new Node('STDLIB_H')) }; 
break;
case 8:
 this.$ = { node: new Node('INCLUDE', new Node($$[$0-3] + '.' + $$[$0-1])) }; 
break;
case 9:
 
        definirConstante($$[$0-1], $$[$0].value);
        this.$ = { node: new Node('DEFINE', new Node($$[$0-1]), $$[$0].node) }; 
    
break;
case 10:
 
        definirConstante($$[$0], null);
        this.$ = { node: new Node('DEFINE', new Node($$[$0])) }; 
    
break;
case 12:

        // Adiciona cada declaração à lista de ASTs
        arvores.push(new AST($$[$0].node));
    
break;
case 13:
 this.$ = { node: $$[$0].node, stringValue: $$[$0].stringValue, value: $$[$0].value }; 
break;
case 14:
 this.$ = { node: new Node('BREAK') }; 
break;
case 15:
 this.$ = { node: new Node('CONTINUE') }; 
break;
case 16: case 17: case 57:
 this.$ = { node: $$[$0].node, stringValue: $$[$0].stringValue }; 
break;
case 26:
 this.$ = { node: new Node('MAIN_FUNCTION', new Node($$[$0-4]), $$[$0].node) }; 
break;
case 27:
 this.$ = { node: new Node('FUNCTION', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-2].node, $$[$0].node) }; 
break;
case 28:
 this.$ = { node: new Node('VOID_FUNCTION', new Node($$[$0-4]), $$[$0-2].node, $$[$0].node) }; 
break;
case 29:
 this.$ = { node: new Node('MAIN_FUNCTION', new Node($$[$0-5]), $$[$0-2].node, $$[$0].node) }; 
break;
case 30:
 this.$ = { node: new Node('VOID_MAIN_FUNCTION', $$[$0-2].node, $$[$0].node) }; 
break;
case 31:
 this.$ = { node: new Node('VOID_MAIN_FUNCTION', $$[$0].node) }; 
break;
case 32:
 this.$ = { node: new Node('FUNCTION_PROTOTYPE', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 33:
 this.$ = { node: new Node('FUNCTION_PROTOTYPE', new Node($$[$0-4]), new Node($$[$0-3])) }; 
break;
case 34:
 this.$ = { node: new Node('VOID_FUNCTION_PROTOTYPE', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 35:
 this.$ = { node: new Node('VOID_FUNCTION_PROTOTYPE', new Node($$[$0-3])) }; 
break;
case 37:
 this.$ = { node: new Node('PARAMETER_LIST', $$[$0-2].node, $$[$0].node) }; 
break;
case 38:
 this.$ = { node: new Node('PARAMETER', new Node($$[$0-1]), new Node($$[$0])) }; 
break;
case 39:
 this.$ = { node: new Node('POINTER_PARAMETER', new Node($$[$0-2]), new Node($$[$0])) }; 
break;
case 40:
 this.$ = { node: new Node('RETURN', $$[$0-1].node) }; 
break;
case 41:
 this.$ = { node: new Node('RETURN') }; 
break;
case 42:
 this.$ = { node: new Node('BLOCK', $$[$0-1].node) }; 
break;
case 43:
 this.$ = { node: new Node('EMPTY_BLOCK') }; 
break;
case 44:
this.$ = {node: $$[$0-1].node, stringValue: $$[$0-1].stringValue, value: $$[$0-1].value}
break;
case 45: case 46: case 47:
this.$ = {node: $$[$0-1].node, stringValue: $$[$0-1].stringValue}
break;
case 48:
 this.$ = { node: new Node('FUNCTION_CALL', new Node($$[$0-3]), $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 49:
 this.$ = { node: new Node('FUNCTION_CALL', new Node($$[$0-2])), stringValue: criaTemp() }; 
break;
case 50:
 this.$ = { node: new Node('MALLOC', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 51:
 this.$ = { node: new Node('FREE', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 52:
 this.$ = { node: new Node('SCANF', $$[$0-4].node, new Node($$[$0-1])), stringValue: criaTemp() }; 
break;
case 53:
 this.$ = { node: new Node('SCANF', new Node('FORMAT_D'), new Node($$[$0-1])), stringValue: criaTemp() }; 
break;
case 54:
 this.$ = { node: new Node('PRINTF', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 55:
 this.$ = { node: new Node('PRINTF', $$[$0-3].node, $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 56:
 this.$ = { node: new Node('STRING', new Node($$[$0])), stringValue: $$[$0] }; 
break;
case 58:
 this.$ = { node: new Node('ARG_LIST', $$[$0-2].node, $$[$0].node), stringValue: $$[$0-2].stringValue + ',' + $$[$0].stringValue }; 
break;
case 59: case 60:

        this.$ = {
            type: 'IF',
            node: new Node('IF', $$[$0-2].node, $$[$0].node)
        };
    
break;
case 61: case 62: case 63: case 64:

        this.$ = {
            type: 'IF_ELSE',
            node: new Node('IF_ELSE', $$[$0-4].node, $$[$0-2].node, $$[$0].node)
        };
    
break;
case 65: case 66:

        this.$ = {
            type: 'IF_ELSE_IF',
            node: new Node('IF_ELSE_IF', $$[$0-4].node, $$[$0-2].node, $$[$0].node)
        };
    
break;
case 67: case 68: case 69:
 this.$ = { node: new Node('SWITCH', $$[$0-4].node, $$[$0-1].node) }; 
break;
case 71:
 this.$ = { node: new Node('CASE_LIST', $$[$0-1].node, $$[$0].node) }; 
break;
case 72:
 this.$ = { node: new Node('CASE', $$[$0-1].node, null) }; 
break;
case 73:
 this.$ = { node: new Node('CASE', $$[$0-2].node, $$[$0].node) }; 
break;
case 74:
 this.$ = { node: new Node('DEFAULT', null) }; 
break;
case 75:
 this.$ = { node: new Node('DEFAULT', $$[$0].node) }; 
break;
case 76: case 77:

        this.$ = {
            type: 'WHILE',
            stringValue: criaTemp(),
            node: new Node('WHILE', $$[$0-2].node, $$[$0].node)
        };
        criaTACIf($$[$0-2].stringValue, temp.indexOf($$[$0].stringValue));
    
break;
case 78: case 79:

        this.$ = {
            type: 'FOR',
            node: new Node('FOR', $$[$0-4].node, $$[$0-3].node, $$[$0-2].node, $$[$0].node)
        };
        criaTACIf($$[$0-4].stringValue, temp.indexOf($$[$0].stringValue));
    
break;
case 80: case 81:

        this.$ = {
            type: 'DO_WHILE',
            node: new Node('DO_WHILE', $$[$0-5].node, $$[$0-2].node)
        };
        criaTACIf($$[$0-2].stringValue, temp.indexOf($$[$0-5].stringValue));
    
break;
case 82:

        this.$ = {
            type: 'INT_LIT',
            value: parseInt($$[$0]),
            stringValue: $$[$0],
            node: new Node('INT_LIT', new Node($$[$0]))
        };
    
break;
case 83:

        this.$ = {
            type: 'F_LIT',
            value: parseFloat($$[$0]),
            stringValue: $$[$0],
            node: new Node('F_LIT', new Node($$[$0]))
        };
    
break;
case 84:

        this.$ = {
            type: 'CHAR_LIT',
            value: $$[$0].charCodeAt(1),
            stringValue: $$[$0],
            node: new Node('CHAR_LIT', new Node($$[$0]))
        };
    
break;
case 85:
this.$ = 'int';
break;
case 86:
this.$ = 'double';
break;
case 87:
this.$ = 'float';
break;
case 88:
this.$ = 'char';
break;
case 89:
this.$ = 'unsigned int';
break;
case 90:
this.$ = 'signed int';
break;
case 91:
this.$ = 'long int';
break;
case 92:
this.$ = 'short int';
break;
case 93:
this.$ = 'const int';
break;
case 94:
this.$ = 'volatile int';
break;
case 95:
this.$ = 'register int';
break;
case 96:
this.$ = 'struct ' + $$[$0];
break;
case 97:
this.$ = 'union ' + $$[$0];
break;
case 98:
this.$ = 'enum ' + $$[$0];
break;
case 99:

        this.$ = {
            node: $$[$0].node,
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 100:

        this.$ = {
            node: new Node('POINTER_DECL', new Node($$[$0-2]), $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 101:

        criarVariavel($$[$0-1], $$[$0], null);
        this.$ = {
            node: new Node('DECL', new Node($$[$0-1]), new Node($$[$0])),
            value: null,
            stringValue: $$[$0]
        };
    
break;
case 102:

        // Support for character literal constant declarations (like 'const int 'A';')
        let varName1 = '_char_const_' + $$[$0].replace(/'/g, '');
        criarVariavel($$[$0-1], varName1, $$[$0].charCodeAt(1));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-1]), new Node($$[$0])),
            value: $$[$0].charCodeAt(1),
            stringValue: varName1
        };
    
break;
case 103:

        // Support for character literal using quotes (like 'const int 'A';')
        let varName2 = '_char_const_' + $$[$0-1];
        criarVariavel($$[$0-3], varName2, $$[$0-1].charCodeAt(0));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-3]), new Node($$[$0-1])),
            value: $$[$0-1].charCodeAt(0),
            stringValue: varName2
        };
    
break;
case 104:

        criarVariavel($$[$0-3], $$[$0-2], $$[$0].value);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 105:

        criarVariavel($$[$0-4]+'[]', $$[$0-3], null);
        this.$ = {
            node: new Node('ARRAY_DECL', new Node($$[$0-4]), new Node($$[$0-3]), new Node($$[$0-1])),
            value: null,
            stringValue: $$[$0-3]
        };
    
break;
case 106:

        // Verifica se o identificador é uma definição
        let valDef1 = obterValorDefinicao($$[$0-1]);
        if (valDef1 !== undefined) {
            criarVariavel($$[$0-4]+'[]', $$[$0-3], null);
            this.$ = {
                node: new Node('ARRAY_DECL', new Node($$[$0-4]), new Node($$[$0-3]), new Node(valDef1)),
                value: null,
                stringValue: $$[$0-3]
            };
        } else {
            erros.push("Identificador '" + $$[$0-1] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_DECL_ERROR'),
                value: null,
                stringValue: $$[$0-3]
            };
        }
    
break;
case 107:

        criarVariavel($$[$0-8]+'[]', $$[$0-7], $$[$0-1].value);
        this.$ = {
            node: new Node('ARRAY_INIT', new Node($$[$0-8]), new Node($$[$0-7]), new Node($$[$0-5]), $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-7]
        };
    
break;
case 108:

        // Verifica se o identificador é uma definição
        let valDef2 = obterValorDefinicao($$[$0-3]);
        if (valDef2 !== undefined) {
            criarVariavel($$[$0-8]+'[]', $$[$0-7], $$[$0-1].value);
            this.$ = {
                node: new Node('ARRAY_INIT', new Node($$[$0-8]), new Node($$[$0-7]), new Node(valDef2), $$[$0-1].node),
                value: $$[$0-1].value,
                stringValue: $$[$0-7]
            };
        } else {
            erros.push("Identificador '" + $$[$0-3] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_INIT_ERROR'),
                value: null,
                stringValue: $$[$0-7]
            };
        }
    
break;
case 109:

        criarVariavel($$[$0-3], $$[$0], null);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-2].node, new Node($$[$0])),
            value: null,
            stringValue: $$[$0-2].stringValue + ',' + $$[$0]
        };
    
break;
case 110:

        criarVariavel($$[$0-5], $$[$0-2], $$[$0].value);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-4].node, new Node('=', new Node($$[$0-2]), $$[$0].node)),
            value: null,
            stringValue: $$[$0-4].stringValue + ',' + $$[$0-2]
        };
    
break;
case 111:

        criarVariavel($$[$0-6]+'[]', $$[$0-3], null);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-5].node, new Node('ARRAY_DECL', new Node($$[$0-6]), new Node($$[$0-3]), new Node($$[$0-1]))),
            value: null,
            stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
        };
    
break;
case 112:

        // Verifica se o identificador é uma definição
        let valDef3 = obterValorDefinicao($$[$0-1]);
        if (valDef3 !== undefined) {
            criarVariavel($$[$0-6]+'[]', $$[$0-3], null);
            this.$ = {
                node: new Node('MULTI_DECL', $$[$0-5].node, new Node('ARRAY_DECL', new Node($$[$0-6]), new Node($$[$0-3]), new Node(valDef3))),
                value: null,
                stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
            };
        } else {
            erros.push("Identificador '" + $$[$0-1] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_DECL_ERROR'),
                value: null,
                stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
            };
        }
    
break;
case 113:

        criarVariavel($$[$0-10]+'[]', $$[$0-7], $$[$0-1].value);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-9].node, new Node('ARRAY_INIT', new Node($$[$0-10]), new Node($$[$0-7]), new Node($$[$0-5]), $$[$0-1].node)),
            value: null,
            stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
        };
    
break;
case 114:

        // Verifica se o identificador é uma definição
        let valDef4 = obterValorDefinicao($$[$0-5]);
        if (valDef4 !== undefined) {
            criarVariavel($$[$0-10]+'[]', $$[$0-7], $$[$0-1].value);
            this.$ = {
                node: new Node('MULTI_DECL', $$[$0-9].node, new Node('ARRAY_INIT', new Node($$[$0-10]), new Node($$[$0-7]), new Node(valDef4), $$[$0-1].node)),
                value: null,
                stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
            };
        } else {
            erros.push("Identificador '" + $$[$0-5] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_INIT_ERROR'),
                value: null,
                stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
            };
        }
    
break;
case 115:

        this.$ = {
            node: new Node($$[$0]),
            value: [$$[$0]],
            stringValue: $$[$0]
        };
    
break;
case 116:

        $$[$0-2].value.push($$[$0]);
        this.$ = {
            node: new Node('ARRAY_ELEMS', $$[$0-2].node, new Node($$[$0])),
            value: $$[$0-2].value,
            stringValue: $$[$0-2].stringValue
        };
    
break;
case 117: case 118: case 119:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '=');
    
break;
case 120:

        verificaVariavel($$[$0-4]);
        this.$ = {
            node: new Node('=', new Node($$[$0-4]), new Node('CHAR_LIT', new Node($$[$0-1]))),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-4], "'" + $$[$0-1] + "'", '=');
    
break;
case 121:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), new Node('CHAR_LIT', new Node($$[$0]))),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0], '=');
    
break;
case 122:

        this.$ = {
            node: new Node('=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '=');
    
break;
case 123:

        this.$ = {
            node: $$[$0].node,
            stringValue: $$[$0].stringValue
        };
    
break;
case 124:

        this.$ = {
            node: new Node('MALLOC', $$[$0-1].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC', $$[$0-1].stringValue, 'CALL');
    
break;
case 125:

        this.$ = {
            node: new Node('MALLOC_SIZEOF', new Node($$[$0-6]), new Node($$[$0-2])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC_SIZEOF', $$[$0-6] + '*sizeof(' + $$[$0-2] + ')', 'CALL');
    
break;
case 126:

        this.$ = {
            node: new Node('MALLOC_SIZEOF', new Node($$[$0-7]), new Node($$[$0-3] + '*')),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC_SIZEOF', $$[$0-7] + '*sizeof(' + $$[$0-3] + '*)', 'CALL');
    
break;
case 127:

        this.$ = {
            type: 'CAST',
            stringValue: criaTemp(),
            node: new Node('CAST', new Node($$[$0-2]), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0].stringValue, $$[$0-2], 'CAST');
      
break;
case 128:

        verificaVariavel($$[$0-3]);
        this.$ = {
            node: new Node('ARRAY_ACCESS', new Node($$[$0-3]), $$[$0-1].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-3], $$[$0-1].stringValue, 'ARRAY_ACCESS');
    
break;
case 129:

        verificaVariavel($$[$0-1]);
        this.$ = {
            node: new Node('++', new Node($$[$0-1])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-1], '1', '++');
    
break;
case 130:

        verificaVariavel($$[$0-1]);
        this.$ = {
            node: new Node('--', new Node($$[$0-1])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-1], '1', '--');
    
break;
case 131:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('+=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '+=');
    
break;
case 132:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('-=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '-=');
    
break;
case 133:

        this.$ = {
            node: new Node('+=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '+=');
    
break;
case 134:

        this.$ = {
            node: new Node('-=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '-=');
    
break;
case 135: case 141:
   
        this.$ = {
            type: $$[$0].type,
            value: $$[$0].value,
            stringValue: $$[$0].stringValue,
            node: $$[$0].node
        }
    
break;
case 136:
   
        this.$ = {
            type: 'SUM',
            value: $$[$0-2].value + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('+', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'SUM');
    
break;
case 137:
   
        this.$ = {
            type: 'SUB',
            value: $$[$0-2].value - $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('-', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'SUB');
    
break;
case 138:

        this.$ = {
            type: 'SIZEOF',
            value: $$[$0].value,
            stringValue: $$[$0].stringValue,
            node: $$[$0].node
        }
    
break;
case 139:

        this.$ = {
            type: 'SIZEOF',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('SIZEOF', new Node($$[$0-1]))
        };
        criaTAC(this.$.stringValue, 'SIZEOF', $$[$0-1], 'UNARY');
    
break;
case 140:

        this.$ = {
            type: 'SIZEOF',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('SIZEOF', new Node($$[$0-2] + '*'))
        };
        criaTAC(this.$.stringValue, 'SIZEOF', $$[$0-2] + '*', 'UNARY');
    
break;
case 142:
   
        this.$ = {
            type: 'MUL',
            value: $$[$0-2].value * $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('*', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MUL');
    
break;
case 143:
   
        this.$ = {
            type: 'MUL',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('MUL', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MUL');
    
break;
case 144:
   
        this.$ = {
            type: 'DIV',
            value: $$[$0-2].value / $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('/', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'DIV');
    
break;
case 145:
   
        this.$ = {
            type: 'MOD',
            value: $$[$0-2].value % $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('%', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MOD');
    
break;
case 146:

        // Verificar se o identificador é uma constante definida
        let defValue = obterValorDefinicao($$[$0]);
        if (defValue !== undefined) {
            this.$ = {
                type: 'DEFINE_CONST',
                value: defValue,
                stringValue: $$[$0],
                node: new Node('DEFINE_CONST', new Node($$[$0]))
            };
        } else {
            // Se não for uma constante, então é uma variável normal
            verificaVariavel($$[$0]);
            this.$ = {
                type: 'IDF',
                value: $$[$0],
                stringValue: $$[$0],
                node: new Node('IDF')
            };
        }
      
break;
case 147:
this.$ = {type: $$[$0].type, stringValue: $$[$0].stringValue, node: $$[$0].node, value: $$[$0].value};
break;
case 148:
this.$ = $$[$0-1];
break;
case 149: case 151: case 154:
this.$ = $$[$0];
break;
case 150:

        this.$ = {
            type: 'UNARY_MINUS',
            value: -$$[$0].value,
            stringValue: criaTemp(),
            node: new Node('UNARY_MINUS', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '0', $$[$0].stringValue, 'SUB');
      
break;
case 152:

        this.$ = {
            type: 'DEREF',
            stringValue: criaTemp(),
            node: new Node('DEREF', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '*', $$[$0].stringValue, 'DEREF');
      
break;
case 153:

        this.$ = {
            type: 'ADDR',
            stringValue: criaTemp(),
            node: new Node('ADDR', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '&', $$[$0].stringValue, 'ADDR');
      
break;
case 155:

    this.$ = {
        type: 'CAST_MALLOC',
        stringValue: criaTemp(),
        node: new Node('CAST_MALLOC', new Node($$[$0-3] + '*'), $$[$0].node)
    };
    
break;
case 157: case 167:

        this.$ = {
            type: 'NOT',
            value: !$$[$0].value,
            stringValue: criaTemp(),
            node: new Node('NOT', $$[$0].node)
        };
        criaTACUnaryOp('!', $$[$0].stringValue, this.$.stringValue);
    
break;
case 159:

        this.$ = {
            type: 'OR',
            value: $$[$0-2].value || $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('OR', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'OR');
    
break;
case 161:

        this.$ = {
            type: 'AND',
            value: $$[$0-2].value && $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('AND', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'AND');
    
break;
case 164:

        this.$ = $$[$0-1];
    
break;
case 165:

        verificaVariavel($$[$0-2]);
        this.$ = {
            type: 'EQ_NULL',
            value: false, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-2]), new Node('NULL'))
        };
        criaTAC(this.$.stringValue, $$[$0-2], 'NULL', 'EQ');
    
break;
case 166:

        verificaVariavel($$[$0-3]);
        this.$ = {
            type: 'EQ_NEG',
            value: false, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-3]), new Node('-' + $$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-3], '-' + $$[$0], 'EQ');
    
break;
case 168:

        this.$ = {
            type: 'NOT',
            value: !$$[$0-1].value,
            stringValue: criaTemp(),
            node: new Node('NOT', $$[$0-1].node)
        };
        criaTACUnaryOp('!', $$[$0-1].stringValue, this.$.stringValue);
    
break;
case 169:

        this.$ = $$[$0];
    
break;
case 170:

        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2].value + $$[$0-1] + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node($$[$0-1], $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, $$[$0-1]);
    
break;
case 171:

        this.$ = {
            type: $$[$0-2],
            value: $$[$0-3].value + $$[$0-2] + (-parseInt($$[$0])),
            stringValue: criaTemp(),
            node: new Node($$[$0-2], $$[$0-3].node, new Node('-' + $$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-3].stringValue, '-' + $$[$0], $$[$0-2]);
    
break;
case 172:

        verificaVariavel($$[$0]);
        this.$ = {
            type: $$[$0-2],
            value: $$[$0-3].value + $$[$0-2] + ('-' + $$[$0]),
            stringValue: criaTemp(),
            node: new Node($$[$0-2], $$[$0-3].node, new Node('-' + $$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-3].stringValue, '-' + $$[$0], $$[$0-2]);
    
break;
case 178:
this.$ = $$[$0]
break;
case 179:
 this.$ = { node: new Node('STRUCT_DECL', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 180:
 
        this.$ = { 
            node: new Node('STRUCT_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 182:
 this.$ = { node: new Node('STRUCT_MEMBERS', $$[$0-1].node, $$[$0].node) }; 
break;
case 183:
 this.$ = { node: new Node('STRUCT_MEMBER', new Node($$[$0-2]), new Node($$[$0-1])) }; 
break;
case 184:
 this.$ = { node: new Node('STRUCT_ARRAY_MEMBER', new Node($$[$0-5]), new Node($$[$0-4]), new Node($$[$0-2])) }; 
break;
case 185:
 this.$ = { node: new Node('UNION_DECL', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 186:
 
        this.$ = { 
            node: new Node('UNION_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 187:
 this.$ = { node: new Node('ENUM_DECL', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 188:
 
        this.$ = { 
            node: new Node('ENUM_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 190:
 this.$ = { node: new Node('ENUM_MEMBERS', $$[$0-2].node, $$[$0].node) }; 
break;
case 191:
 this.$ = { node: new Node('ENUM_MEMBER', new Node($$[$0])) }; 
break;
case 192:
 this.$ = { node: new Node('ENUM_MEMBER_VALUE', new Node($$[$0-2]), new Node($$[$0])) }; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1,16:$V2,17:68,18:6,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{1:[3]},{5:[1,76]},{7:77,8:78,9:$V0,14:$V1,16:$V2,17:68,18:6,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{5:[2,3],14:$V1,17:68,18:79,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},o($VE,[2,4]),o($VF,[2,11]),{10:[1,80]},{14:[1,81]},o($VG,[2,13]),{21:[1,82]},{21:[1,83]},o($VG,[2,16]),o($VG,[2,17]),o($VG,[2,18]),o($VF,[2,19]),o($VG,[2,20]),o($VG,[2,21]),o($VG,[2,22]),o($VG,[2,23]),o($VG,[2,24]),o($VG,[2,25]),{21:[1,84]},{21:[1,85]},{21:[1,86]},{21:[1,87]},{35:[1,88]},{35:[1,89]},{35:[1,90]},{14:$V1,17:68,18:92,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:91,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{35:[1,93]},{7:94,14:$V1,17:68,18:6,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,45:[1,95],46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:[1,97],34:[1,96],41:$VH,73:$VI,88:98,89:$VJ},{14:[1,102],34:[1,103]},{14:$VK,17:68,21:[1,105],35:$VL,41:$V7,43:104,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:[1,109]},{14:[1,110]},{14:[1,111]},o([10,12,21,41,104,105,107,108,112,114,120,121,122],$VM,{35:[1,113],90:$VN,91:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,117:$VT}),o([10,12,21,41,104,105,107,108,112,114,117,120,121,122],$VU,{90:$VV,101:$VW,102:$VX}),o($VY,[2,123]),o($VY,[2,156],{112:[1,123]}),{14:$VZ,17:68,35:[1,126],41:$V7,43:63,48:124,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:125,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{35:[1,128]},{35:[1,129]},{35:[1,130]},{35:[1,131]},o($V_,[2,85]),o($V_,[2,86]),o($V_,[2,87]),o($V_,[2,88]),{74:[1,132]},{74:[1,133]},{74:[1,134]},{74:[1,135]},{74:[1,136]},{74:[1,137]},{74:[1,138]},o($V$,[2,158],{114:$V01}),o($V11,[2,160]),o($V11,[2,162],{119:140,10:[1,146],12:[1,145],117:[1,143],120:[1,141],121:[1,142],122:[1,144]}),o($V11,[2,163]),{14:$VZ,17:68,33:149,35:$V5,41:$V7,43:148,48:147,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},o([10,12,21,36,112,114,117,120,121,122],$V51,{104:$V61,105:$V71}),o($V81,[2,135],{41:$V91,107:$Va1,108:$Vb1}),o($Vc1,[2,138]),o($Vc1,$Vd1),{35:[1,158]},o($Vc1,[2,147]),{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:159,105:$VC,106:160},o($Vc1,$Ve1),{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:161,105:$VC,106:160},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:162,105:$VC,106:160},o($Vf1,$Vg1),o($Vf1,[2,83]),o($Vf1,$Vh1),{1:[2,1]},{5:[2,2],14:$V1,17:68,18:79,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},o($VE,[2,5]),o($VF,[2,12]),{11:[1,163],13:[1,164],14:[1,165]},o([9,14,16,20,22,35,38,41,42,44,51,52,53,55,57,59,61,68,69,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,97,105,110],[2,10],{17:166,71:$Vk,72:$Vl,73:$Vm}),o($VG,[2,14]),o($VG,[2,15]),o($VG,[2,44]),o($VG,[2,45]),o($VG,[2,46]),o($VG,[2,47]),{14:$VZ,17:68,35:$V5,41:$V7,43:63,48:167,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$VZ,17:68,35:$V5,41:$V7,43:63,48:168,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$V1,17:68,19:169,33:170,35:$V5,41:$V7,43:63,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,63:70,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{68:[1,171]},{68:[1,172]},{14:$VZ,17:68,35:$V5,41:$V7,43:173,48:175,55:$Vd,63:174,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$V1,17:68,18:79,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,45:[1,176],46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},o($VG,[2,43]),{35:[1,177]},o($Vi1,$Vj1,{35:[1,178],90:$Vk1,91:$Vl1}),{21:[2,99],40:$Vm1},{14:$Vn1,73:$VI,88:182,89:$VJ},o($Vi1,[2,102]),{14:[1,184]},{35:[1,185]},{35:[1,186]},{21:[1,187],104:$V61,105:$V71},o($VG,[2,41]),o($Vc1,$VM,{91:$VO}),{14:$VK,17:68,33:149,35:$VL,41:$V7,43:188,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,95:108,97:$VB,98:66,103:64,105:$VC,106:65},o($Vc1,$VU),o($Vo1,$Vp1,{44:[1,189]}),o($Vo1,$Vq1,{44:[1,190]}),o($Vo1,$Vr1,{44:[1,191]}),{14:$VK,17:68,35:$VL,41:$V7,43:192,51:$Vs1,55:$Vd,63:194,71:$Vk,72:$Vl,73:[1,196],89:[1,195],94:193,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VK,17:68,35:$VL,36:[1,199],41:$V7,43:200,50:198,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VK,17:68,35:$VL,41:$V7,43:201,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},o($VY,[2,129]),o($VY,[2,130]),{14:$VK,17:68,35:$VL,41:$V7,43:202,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VK,17:68,35:$VL,41:$V7,43:203,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{105:[1,205],118:[1,204]},{14:$VK,17:68,35:$VL,41:$V7,43:206,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VK,17:68,35:$VL,41:$V7,43:207,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VK,17:68,35:$VL,41:$V7,43:208,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VZ,17:68,35:$V5,41:$V7,43:63,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,110:$Vt1,111:209,113:59,115:60,116:61},o($VY,[2,157]),o([10,12,41,104,105,107,108,117,120,121,122],$Vd1,{21:$Vu1,36:$Vu1,112:$Vu1,114:$Vu1}),{14:$VZ,17:68,33:149,35:$V5,41:$V7,43:148,48:211,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},o([10,12,21,36,41,104,105,107,108,112,114,120,121,122],$VM,{91:$VO,117:$VT}),{14:$VK,17:68,35:$VL,41:$V7,43:212,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:$VK,17:68,35:$VL,41:$V7,43:213,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{54:214,56:[1,215],58:$Vv1},{54:217,58:$Vv1},o($V_,[2,89]),o($V_,[2,90]),o($V_,[2,91]),o($V_,[2,92]),o($V_,[2,93]),o($V_,[2,94]),o($V_,[2,95]),{14:$VZ,17:68,35:$V5,41:$V7,43:63,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,110:$Vt1,113:218,115:60,116:61},{14:$VK,17:68,35:$VL,41:$V7,43:63,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:[1,220],106:65,115:219},o($Vw1,[2,173]),o($Vw1,[2,174]),o($Vw1,[2,175]),o($Vw1,[2,176]),o($Vw1,[2,177]),o($Vw1,[2,178]),{36:[1,221]},o($Vx1,$V51,{36:$Vy1,104:$V61,105:$V71}),{36:[1,224],41:[1,223]},{14:[1,225]},{14:[1,226]},{14:[1,227]},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:228,105:$VC,106:160},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:229,105:$VC,106:160},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:230,105:$VC,106:231},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:232,105:$VC,106:160},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:233,105:$VC,106:160},{33:234,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},o($Vc1,[2,150]),o($Vc1,[2,154]),o($Vc1,[2,152]),o($Vc1,[2,153]),{12:[1,235]},{12:[1,236]},{15:[1,237]},o($VE,[2,9]),{36:[1,238]},{36:[1,239]},{14:$V1,17:68,19:240,33:170,35:$V5,41:$V7,43:63,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,63:70,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$Vn1,41:$VH,73:$VI,88:98,89:$VJ},{35:[1,241]},{35:[1,242]},o($Vx1,$V51,{36:[1,243],104:$V61,105:$V71}),o([10,12,41,104,105,107,108,112,114,117,120,121,122],$Ve1,{36:[1,244]}),{36:[1,245]},o($VG,[2,42]),{33:249,36:[1,246],37:247,39:248,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},{33:249,36:[1,251],37:250,39:248,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},{14:$VK,17:68,35:$VL,41:$V7,43:252,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:[1,254],71:[1,253]},{14:[1,255]},{21:[2,100],40:$Vm1},o($Vi1,$Vj1,{90:$Vk1,91:$Vl1}),{89:[1,256]},{33:249,36:[1,258],37:257,39:248,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},{33:249,36:[1,260],37:259,39:248,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},o($VG,[2,40]),{36:$Vy1,104:$V61,105:$V71},{33:263,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,123:261,124:262},{33:263,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,123:264,124:262},{14:$Vz1,125:265,126:266},o($VY,[2,117],{104:$V61,105:$V71}),o($VY,[2,118]),o($VA1,$Ve1,{21:$VB1,36:$VB1}),{14:[1,268]},o($VA1,$Vh1,{21:$VC1,36:$VC1}),{35:[1,269]},{36:[1,270],40:$VD1},{21:[2,49]},o($VE1,[2,57],{104:$V61,105:$V71}),{92:[1,272],104:$V61,105:$V71},o($VY,[2,131],{104:$V61,105:$V71}),o($VY,[2,132],{104:$V61,105:$V71}),o($V11,[2,165]),{71:[1,273]},o($VY,[2,122],{104:$V61,105:$V71}),o($VY,[2,133],{104:$V61,105:$V71}),o($VY,[2,134],{104:$V61,105:$V71}),o($V$,[2,159],{114:$V01}),{14:$VK,17:68,35:[1,275],41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:274,105:$VC,106:160},{36:[1,276]},{36:[1,277],104:$V61,105:$V71},{36:[1,278],104:$V61,105:$V71},{40:[1,279]},{40:[1,280]},o($VE1,[2,56]),{36:[1,281],40:[1,282]},o($V11,[2,161]),o($V11,[2,170]),{14:[1,284],17:68,35:$VL,41:$V7,55:$Vd,63:70,71:[1,283],72:$Vl,73:$Vm,95:108,97:$VB,98:159,105:$VC,106:160},o($V11,[2,164]),o($Vc1,[2,148]),{36:[1,285]},{14:$VK,17:68,35:$VL,41:$V7,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:286,105:$VC,106:160},o($VF1,$Vp1),o($VF1,$Vq1),o($VF1,$Vr1),o($V81,[2,136],{41:$V91,107:$Va1,108:$Vb1}),o($V81,[2,137],{41:$V91,107:$Va1,108:$Vb1}),o($Vc1,[2,142]),o($Vc1,[2,143]),o($Vc1,[2,144]),o($Vc1,[2,145]),{36:[1,287],41:[1,288]},o($VE,[2,6]),o($VE,[2,7]),{14:[1,289]},{14:$V1,17:68,18:290,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:291,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$V1,17:68,18:293,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:292,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:[1,295],47:294,95:296,96:40},{14:$VZ,17:68,35:$V5,41:$V7,43:63,48:297,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$VZ,17:68,35:$V5,41:$V7,43:63,48:298,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{44:[1,299]},{44:[1,300]},{44:[1,301]},{26:302,44:$V9},{36:[1,303],40:$VG1},o($VE1,[2,36]),{14:[1,305],41:[1,306]},{36:[1,307],40:$VG1},{21:[1,308]},o($Vi1,[2,104],{104:$V61,105:$V71}),{92:[1,309]},{92:[1,310]},o($Vi1,[2,109],{90:[1,311],91:[1,312]}),o($Vi1,[2,103]),{36:[1,313],40:$VG1},{21:[1,314]},{36:[1,315],40:$VG1},{26:316,44:$V9},{33:263,45:[1,317],74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,124:318},o($VH1,[2,181]),{14:[1,319]},{33:263,45:[1,320],74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,124:318},{40:[1,322],45:[1,321]},o($VI1,[2,189]),o($VI1,[2,191],{90:[1,323]}),{89:[1,324]},{14:[1,326],17:68,35:$VL,41:$V7,43:325,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{21:[2,48]},{14:$VK,17:68,35:$VL,41:$V7,43:327,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},o([10,12,21,36,40,41,90,92,101,102,104,105,107,108,112,114,117,120,121,122],[2,128]),o($V11,[2,166]),o($V11,$Vu1),{14:$VZ,17:68,33:149,35:$V5,41:$V7,43:148,48:328,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41,95:108,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},o($V11,$VJ1),{21:[2,50]},{21:[2,51]},{55:[1,329]},{55:[1,330]},{21:[2,54]},{14:$VK,17:68,35:$VL,41:$V7,43:200,50:331,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},o($VA1,$Vg1,{21:$VK1,36:$VK1,112:$VK1,114:$VK1}),o($VA1,$VM,{21:$VL1,36:$VL1,112:$VL1,114:$VL1,91:$VO}),{51:$Vs1,94:332},o($Vc1,[2,127]),o($Vc1,[2,139]),{36:[1,333]},{12:[1,334]},o($VF,[2,59],{60:[1,335]}),o($VF,[2,60],{60:[1,336]}),o($VG,[2,76]),o($VG,[2,77]),{36:[1,337]},{90:$VN,91:$VO,99:$VP,100:$VQ,101:$VR,102:$VS},{90:$VV,101:$VW,102:$VX},{36:[1,338]},{36:[1,339]},{62:340,64:341,65:$VM1,67:$VN1},{62:344,64:341,65:$VM1,67:$VN1},{62:345,64:341,65:$VM1,67:$VN1},o($VG,[2,26]),{26:346,44:$V9},{33:249,39:347,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},o($VE1,[2,38]),{14:[1,348]},{21:[1,350],26:349,44:$V9},o($VG,[2,33]),o($Vi1,[2,105],{90:[1,351]}),o($Vi1,[2,106],{90:[1,352]}),{14:$VK,17:68,35:$VL,41:$V7,43:353,55:$Vd,63:70,71:$Vk,72:$Vl,73:$Vm,95:108,97:$VB,98:66,103:64,105:$VC,106:65},{14:[1,355],71:[1,354]},{21:[1,357],26:356,44:$V9},o($VG,[2,35]),{26:358,44:$V9},o($VG,[2,31]),{14:[1,360],21:[1,359]},o($VH1,[2,182]),{21:[1,361],91:[1,362]},{14:[1,364],21:[1,363]},{14:[1,366],21:[1,365]},{14:$Vz1,126:367},{71:[1,368]},o($VY,[2,120]),{36:[1,369],104:$V61,105:$V71},o([36,104,105,107,108],$VM,{41:[1,370],91:$VO}),o($VE1,[2,58],{104:$V61,105:$V71}),{36:[1,371]},{14:[1,372]},{14:[1,373]},{36:[1,374],40:$VD1},o($Vc1,[2,155]),o($Vc1,[2,140]),o($VE,[2,8]),{14:$V1,17:68,18:375,19:9,20:$V3,22:$V4,23:377,24:13,25:14,26:376,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$V1,17:68,18:378,19:9,20:$V3,22:$V4,23:380,24:13,25:14,26:379,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{14:$V1,17:68,18:381,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:382,27:16,28:17,29:18,30:19,31:20,32:21,33:32,35:$V5,38:$V6,41:$V7,42:$V8,43:63,44:$V9,46:22,47:23,48:24,49:25,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,63:70,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,95:39,96:40,97:$VB,98:66,103:64,105:$VC,106:65,109:41,110:$VD,111:58,113:59,115:60,116:61},{21:[1,383]},{21:[1,384]},{45:[1,385],64:386,65:$VM1,67:$VN1},o($VO1,[2,70]),{17:387,71:$Vk,72:$Vl,73:$Vm},{66:[1,388]},{45:[1,389],64:386,65:$VM1,67:$VN1},{45:[1,390],64:386,65:$VM1,67:$VN1},o($VG,[2,29]),o($VE1,[2,37]),o($VE1,[2,39]),o($VG,[2,27]),o($VG,[2,32]),{44:[1,391]},{44:[1,392]},o($Vi1,[2,110],{104:$V61,105:$V71}),{92:[1,393]},{92:[1,394]},o($VG,[2,28]),o($VG,[2,34]),o($VG,[2,30]),o($VG,[2,179]),{21:[1,395]},o($VH1,[2,183]),{71:[1,396]},o($VG,[2,185]),{21:[1,397]},o($VG,[2,187]),{21:[1,398]},o($VI1,[2,190]),o($VI1,[2,192]),o($Vc1,[2,124]),{97:[1,399]},o($V11,$VJ1),{36:[1,400]},{36:[1,401]},{21:[2,55]},o($VG,[2,63]),o($VG,[2,64]),o($VG,[2,66]),o($VG,[2,61]),o($VG,[2,62]),o($VG,[2,65]),o($VG,[2,78]),o($VG,[2,79]),o($VG,[2,80]),o($VG,[2,81]),o($VG,[2,67]),o($VO1,[2,71]),{66:[1,402]},o($VO1,[2,74],{18:6,19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,46:22,47:23,48:24,49:25,33:32,95:39,96:40,109:41,111:58,113:59,115:60,116:61,43:63,103:64,106:65,98:66,17:68,63:70,7:403,14:$V1,20:$V3,22:$V4,35:$V5,38:$V6,41:$V7,42:$V8,44:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,97:$VB,105:$VC,110:$VD}),o($VG,[2,68]),o($VG,[2,69]),{17:405,71:$Vk,72:$Vl,73:$Vm,93:404},{17:405,71:$Vk,72:$Vl,73:$Vm,93:406},o($Vi1,[2,111],{90:[1,407]}),o($Vi1,[2,112],{90:[1,408]}),o($VG,[2,180]),{92:[1,409]},o($VG,[2,186]),o($VG,[2,188]),{35:[1,410]},{21:[2,52]},{21:[2,53]},o($VO1,[2,72],{18:6,19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,46:22,47:23,48:24,49:25,33:32,95:39,96:40,109:41,111:58,113:59,115:60,116:61,43:63,103:64,106:65,98:66,17:68,63:70,7:411,14:$V1,20:$V3,22:$V4,35:$V5,38:$V6,41:$V7,42:$V8,44:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,97:$VB,105:$VC,110:$VD}),o($VO1,[2,75],{19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,46:22,47:23,48:24,49:25,33:32,95:39,96:40,109:41,111:58,113:59,115:60,116:61,43:63,103:64,106:65,98:66,17:68,63:70,18:79,14:$V1,20:$V3,22:$V4,35:$V5,38:$V6,41:$V7,42:$V8,44:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,97:$VB,105:$VC,110:$VD}),{40:$VP1,45:[1,412]},o($VI1,[2,115]),{40:$VP1,45:[1,414]},{44:[1,415]},{44:[1,416]},{21:[1,417]},{33:418,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$V21,86:$V31,87:$V41},o($VO1,[2,73],{19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,46:22,47:23,48:24,49:25,33:32,95:39,96:40,109:41,111:58,113:59,115:60,116:61,43:63,103:64,106:65,98:66,17:68,63:70,18:79,14:$V1,20:$V3,22:$V4,35:$V5,38:$V6,41:$V7,42:$V8,44:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,57:$Ve,59:$Vf,61:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,97:$VB,105:$VC,110:$VD}),o($Vi1,[2,107]),{17:419,71:$Vk,72:$Vl,73:$Vm},o($Vi1,[2,108]),{17:405,71:$Vk,72:$Vl,73:$Vm,93:420},{17:405,71:$Vk,72:$Vl,73:$Vm,93:421},o($VH1,[2,184]),{36:[1,422],41:[1,423]},o($VI1,[2,116]),{40:$VP1,45:[1,424]},{40:$VP1,45:[1,425]},{36:[1,426]},{36:[1,427]},o($Vi1,[2,113]),o($Vi1,[2,114]),o($Vc1,[2,125]),{36:[1,428]},o($Vc1,[2,126])],
defaultActions: {76:[2,1],199:[2,49],270:[2,48],277:[2,50],278:[2,51],281:[2,54],374:[2,55],400:[2,52],401:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var escopoAtual = 0;
  var tabelaSimbolos = [];
  var tabelaDefinicoes = {}; // Tabela para armazenar definições do pré-processador
  var temp = [];
  var tac = [];
  var erros = [];
  var arvores = [];
  var comment_flag = false;

  class AST {
      constructor(root) {
          this.root = root;
      }

      postorder(node) {
          if (node !== null) {
              this.postorder(node.leftChild);
              this.postorder(node.rightChild);
              console.log(node.type);
          }
      }

      inorder(node) {
          if (node !== null) {
              this.inorder(node.leftChild);
              tac.push(node.type);
              this.inorder(node.rightChild);
          }
      }
  }

  class Node {
      constructor(type, leftChild = null, rightChild = null) {
          this.type = type;
          this.leftChild = leftChild;
          this.rightChild = rightChild;
      }
  }

  function printPosOrder(node, deep = 0) {
      let indent = "    ".repeat(deep);  // Ajusta a indentação para cada nível
      let treeLine = indent + "|";
      
      if (node !== null && node !== undefined) {
          // Exibe o tipo do nó atual
          console.log(treeLine + "- " + (node.type || "undefined"));
          
          // Se houver filhos, imprimimos as relações
          if (node.leftChild !== null && node.leftChild !== undefined || 
              node.rightChild !== null && node.rightChild !== undefined) {
              
              if (node.leftChild !== null && node.leftChild !== undefined) {
                  console.log(treeLine + "   /         \\");
                  printPosOrder(node.leftChild, deep + 1); // Desenha o filho à esquerda
              }

              if (node.rightChild !== null && node.rightChild !== undefined) {
                  console.log(treeLine + "   \\         /");
                  printPosOrder(node.rightChild, deep + 1); // Desenha o filho à direita
              }
          }
      } else {
          console.log(treeLine + "- " + "undefined");
      }
  }

  function criarVariavel(tipo, nome, valor) {
      if (typeof valor === 'string') {
          const variavelExistente = tabelaSimbolos.find(dictAtual => dictAtual.id === valor);
          if (variavelExistente) {
              tabelaSimbolos.push({ tipo, id: nome, val: variavelExistente.val, escopo: escopoAtual });
          }
      } else {
          tabelaSimbolos.push({ tipo, id: nome, val: valor, escopo: escopoAtual });
      }
  }

  function verificaVariavel(id) {
      const variavel = tabelaSimbolos.find(variavel => variavel.id === id);
      if (!variavel) {
          erros.push("Variável '" + id + "' não declarada");
      }
  }

  function verificaTipos(varOne, varTwo) {
      if (typeof varOne === typeof varTwo) {
          return true;
      } else {
          erros.push(`${varOne} é de tipo diferente de ${varTwo}`);
      }
  }

  function criaTAC(temp, var1, var2, op) {
      const code = `${temp} = ${var1} ${op} ${var2}`;
      tac.push(code);
  }

  function criaTACIf(condicional, l) {
      tac.push(`if ${condicional} goto ${l}`);
  }

  function criaTACUnaryOp(op, var1, temp) {
      const code = `${temp} = ${op}${var1}`;
      tac.push(code);
  }

  function printaTAC() {
      tac.forEach((line, index) => {
          console.log(`${index}: ${line}`);
      });
  }

  function criaTemp() {
      return `temp${Math.floor(Math.random() * 1000)}`;
  }

  function criaNode(type, left, right) {
      return new Node(type, left, right);
  }
  
  function definirConstante(nome, valor) {
      tabelaDefinicoes[nome] = valor;
  }
  
  function obterValorDefinicao(nome) {
      return tabelaDefinicoes[nome];
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar comentários de linha */
break;
case 1:/* Ignorar comentários de bloco */
break;
case 2:/* Ignorar espaços em branco */
break;
case 3:console.log('Token INCLUDE'); return 9;
break;
case 4:console.log('Token DEFINE'); return 16;
break;
case 5:console.log('Token STDIO_H'); return 11;
break;
case 6:console.log('Token STDLIB_H'); return 13;
break;
case 7:console.log('Token MALLOC'); return 51;
break;
case 8:console.log('Token FREE'); return 52;
break;
case 9:console.log('Token SIZEOF'); return 97;
break;
case 10:console.log('Token VOID'); return 38;
break;
case 11:console.log('Token RETURN'); return 42;
break;
case 12:console.log('Token PRINTF'); return 57;
break;
case 13:console.log('Token SCANF'); return 53;
break;
case 14:console.log('Token MAIN'); return 34;
break;
case 15:console.log('Token INT'); return 74;
break;
case 16:console.log('Token DOUBLE'); return 75;
break;
case 17:console.log('Token FLOAT'); return 76;
break;
case 18:console.log('Token CHAR'); return 77;
break;
case 19:console.log('Token STRUCT'); return 85;
break;
case 20:console.log('Token UNION'); return 86;
break;
case 21:console.log('Token ENUM'); return 87;
break;
case 22:console.log('Token TYPEDEF'); return 'TYPEDEF';
break;
case 23:console.log('Token UNSIGNED'); return 78;
break;
case 24:console.log('Token SIGNED'); return 79;
break;
case 25:console.log('Token CONST'); return 82;
break;
case 26:console.log('Token VOLATILE'); return 83;
break;
case 27:console.log('Token REGISTER'); return 84;
break;
case 28:console.log('Token LONG'); return 80;
break;
case 29:console.log('Token SHORT'); return 81;
break;
case 30:console.log('Token ADD_ASSIGN'); return 101;
break;
case 31:console.log('Token SUB_ASSIGN'); return 102;
break;
case 32:console.log('Token INC'); return 99;
break;
case 33:console.log('Token DEC'); return 100;
break;
case 34:console.log('Token MUL'); return 41;
break;
case 35:console.log('Token MUL_ASSIGN'); return 'MUL_ASSIGN';
break;
case 36:console.log('Token DIV'); return 107;
break;
case 37:console.log('Token DIV_ASSIGN'); return 'DIV_ASSIGN';
break;
case 38:console.log('Token MOD'); return 108;
break;
case 39:console.log('Token MOD_ASSIGN'); return 'MOD_ASSIGN';
break;
case 40:console.log('Token SUM'); return 104;
break;
case 41:console.log('Token SUB'); return 105;
break;
case 42:console.log('Token COMMA'); return 40;
break;
case 43:console.log('Token SEMICOLON'); return 21;
break;
case 44:console.log('Token COLON'); return 66;
break;
case 45:console.log('Token DOT'); return '.';
break;
case 46:console.log('Token QUOTE'); return 89;
break;
case 47:console.log('Token LPAREN'); return 35;
break;
case 48:console.log('Token RPAREN'); return 36;
break;
case 49:console.log('Token LBRACE'); return 44;
break;
case 50:console.log('Token RBRACE'); return 45;
break;
case 51:console.log('Token LBRACKET'); return 91;
break;
case 52:console.log('Token RBRACKET'); return 92;
break;
case 53:console.log('Token LE'); return 120;
break;
case 54:console.log('Token GE'); return 121;
break;
case 55:console.log('Token LT'); return 10;
break;
case 56:console.log('Token GT'); return 12;
break;
case 57:console.log('Token NE'); return 122;
break;
case 58:console.log('Token EQ'); return 117;
break;
case 59:console.log('Token ASSIGN'); return 90;
break;
case 60:console.log('Token AND'); return 114;
break;
case 61:console.log('Token OR'); return 112;
break;
case 62:console.log('Token NOT'); return 110;
break;
case 63:console.log('Token BITAND'); return 55;
break;
case 64:console.log('Token IF'); return 59;
break;
case 65:console.log('Token SWITCH'); return 61;
break;
case 66:console.log('Token CASE'); return 65;
break;
case 67:console.log('Token BREAK'); return 20;
break;
case 68:console.log('Token CONTINUE'); return 22;
break;
case 69:console.log('Token DEFAULT'); return 67;
break;
case 70:console.log('Token ELSE'); return 60;
break;
case 71:console.log('Token WHILE'); return 68;
break;
case 72:console.log('Token FOR'); return 69;
break;
case 73:console.log('Token DO'); return 70;
break;
case 74:console.log('Token NULL'); return 118;
break;
case 75:console.log('Token FORMAT_D'); return 56;
break;
case 76:console.log('Token STRING_LIT:', yy_.yytext); return 58;
break;
case 77:console.log('Token IDF'); return 14;
break;
case 78:console.log('Token F_LIT'); return 72;
break;
case 79:console.log('Token INT_LIT'); return 71;
break;
case 80:console.log('Token CHAR_LIT'); return 73;
break;
case 81:console.log('Token QUOTE'); return 89;
break;
case 82:console.log('Token HASH'); return '#';
break;
case 83:console.log('Erro léxico: caractere [', yy_.yytext, '] não reconhecido.');
break;
case 84:console.log('Token EOF'); return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\\\*[^*]*\\\*+([^/*][^*]*\\\*+)*\/)/,/^(?:\s+)/,/^(?:#include\b)/,/^(?:#define\b)/,/^(?:stdio\.h\b)/,/^(?:stdlib\.h\b)/,/^(?:malloc\b)/,/^(?:free\b)/,/^(?:sizeof\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:printf\b)/,/^(?:scanf\b)/,/^(?:main\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:struct\b)/,/^(?:union\b)/,/^(?:enum\b)/,/^(?:typedef\b)/,/^(?:unsigned\b)/,/^(?:signed\b)/,/^(?:const\b)/,/^(?:volatile\b)/,/^(?:register\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\*=)/,/^(?:\/)/,/^(?:\/=)/,/^(?:%)/,/^(?:%=)/,/^(?:\+)/,/^(?:-)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:NULL\b)/,/^(?:%d\b)/,/^(?:"([^\"\n]|\\")*")/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[0-9]*\.[0-9]+([eE][+-][0-9]+)?)/,/^(?:[0-9]+)/,/^(?:'\[a-zA-Z0-9\]')/,/^(?:')/,/^(?:#)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}